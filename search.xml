<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Kali Linux设置中文教程</title>
      <link href="/2025/09/10/Kali-Chinese/"/>
      <url>/2025/09/10/Kali-Chinese/</url>
      
        <content type="html"><![CDATA[<h1 id="kali设置中文"><a href="#kali设置中文" class="headerlink" title="kali设置中文"></a>kali设置中文</h1><p>在Kali Linux中配置中文环境步骤：</p><p>1、打开终端，更新系统包列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-update</span><br><span class="line">sudo apt-upgrade</span><br></pre></td></tr></table></figure><p>2、安装中文语言包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install locales</span><br></pre></td></tr></table></figure><p>3、生成中文语言环境（以zh_CN.UTF-8为例）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg-reconfigure locales</span><br></pre></td></tr></table></figure><p>在出现的界面中，选择 zh_CN.UTF-8，通常通过空格选择。</p><p>确认后，在出现的界面中可以看到 zh_CN.UTF-8，右键选中OK，确认，如下图。</p><p>4、更新系统区域设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo locale-gen zh_CN.UTF-8</span><br></pre></td></tr></table></figure><p>5、应用中文设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo update-locale LANG=zh_CN.UTF-8</span><br></pre></td></tr></table></figure><p>6、重新登录或重启Kali Linux，以使配置生效。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Kali Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kali Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sing-box搭建详细图文教程--鸣谢233boy大佬</title>
      <link href="/2025/07/16/sing%20box%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B/"/>
      <url>/2025/07/16/sing%20box%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Sing-box搭建详细图文教程"><a href="#Sing-box搭建详细图文教程" class="headerlink" title="Sing box搭建详细图文教程"></a>Sing box搭建详细图文教程</h1><h2 id="在此鸣谢233boy大佬"><a href="#在此鸣谢233boy大佬" class="headerlink" title="在此鸣谢233boy大佬"></a><strong>在此鸣谢233boy大佬</strong></h2><p><a href="https://github.com/233boy/sing-box/wiki/sing-box%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B">原文地址-感谢233boy大佬</a></p><p>sing-box 无敌好用！</p><p>官网：<a href="https://sing-box.sagernet.org/zh/">https://sing-box.sagernet.org/zh/</a></p><p>手动配置 sing-box 可能稍微会有亿点点复杂和麻烦</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>总结一下此文章的大致流程，此 sing-box 教程可百分百帮助你搭建 sing-box 使用，哪怕你是第一次接触这些陌生的东西。</p><ul><li>购买一个 VPS<br>想要搭建 V2Ray，就必须要拥有一台 VPS。</li><li>获取 VPS 信息<br>我们必须要知道 VPS IP 地址，root 用户密码，SSH 端口</li><li>安装 Xshell<br>Xshell 是一个 SSH 客户端，要登录 VPS，当然需要 SSH 客户端</li><li>登录 VPS<br>使用 Xshell 配置 VPS SSH 信息，然后登录</li><li>安装 sing-box<br>极速安装，全程自动</li><li>sing-box 安装完成<br>此时你可以使用客户端配置 sing-box 使用了</li><li>sing-box 高级玩法<br>配置 VLESS-REALITY ，TUIC，Trojan，Hysteria2，VMess-WS-TLS ， VLESS-WS-TLS等</li></ul><h2 id="机场推荐"><a href="#机场推荐" class="headerlink" title="机场推荐"></a>机场推荐</h2><p>如果你只是单纯的翻，墙需求，可以购买机场的，不用自己搭建什么的，省心省力。</p><p>机场推荐： <a href="https://on.affpass.com/go/jms">Just My Socks</a></p><p><a href="https://on.affpass.com/go/jms">Just My Socks</a> 是搬瓦工提供的服务，不怕跑路，非国人商家，无须担心 IP 被墙问题。</p><p>购买教程： <a href="https://github.com/233boy/v2ray/wiki/justmysocks%e8%af%a6%e7%bb%86%e5%9b%be%e6%96%87%e8%b4%ad%e4%b9%b0%e6%95%99%e7%a8%8b">Just My Socks 详细图文购买教程</a></p><h2 id="购买一个VPS"><a href="#购买一个VPS" class="headerlink" title="购买一个VPS"></a>购买一个VPS</h2><p>想要搭建 V2Ray， 拥有一个 VPS 是必需的。</p><p>我们推荐使用：<a href="https://on.affpass.com/go/bwg">搬瓦工（Bandwagon Host）</a> VPS 来搭建 sing-box</p><p>搬瓦工是一个对中国用户极度友好的 VPS 商家，有香港，CN2 GIA 优化线路，并且支持支付宝付款，当然也是支持退款的！</p><p>推荐购买的搬瓦工套餐如下</p><table><thead><tr><th align="center">线路</th><th align="center">CPU</th><th align="center">内存</th><th align="center">硬盘</th><th align="center">带宽</th><th align="center">流量</th><th align="center">价格</th><th align="center">链接</th></tr></thead><tbody><tr><td align="center">香港</td><td align="center">2 核</td><td align="center">2048 MB</td><td align="center">40 GB</td><td align="center">1 G</td><td align="center">500GB &#x2F; 月</td><td align="center"><strong>$89.99 &#x2F; 月</strong></td><td align="center"><a href="https://on.affpass.com/go/bwg/95">购买</a></td></tr><tr><td align="center">香港</td><td align="center">4 核</td><td align="center">4096 MB</td><td align="center">80 GB</td><td align="center">1 G</td><td align="center">1000GB &#x2F; 月</td><td align="center">$155.99 &#x2F; 月</td><td align="center"><a href="https://on.affpass.com/go/bwg/96">购买</a></td></tr><tr><td align="center">香港</td><td align="center">6 核</td><td align="center">8192 MB</td><td align="center">160 GB</td><td align="center">1 G</td><td align="center">2000GB &#x2F; 月</td><td align="center">$299.99 &#x2F; 月</td><td align="center"><a href="https://on.affpass.com/go/bwg/97">购买</a></td></tr><tr><td align="center">香港</td><td align="center">8 核</td><td align="center">16384 MB</td><td align="center">320 GB</td><td align="center">1 G</td><td align="center">4000GB &#x2F; 月</td><td align="center">$589.99 &#x2F; 月</td><td align="center"><a href="https://on.affpass.com/go/bwg/98">购买</a></td></tr><tr><td align="center">香港</td><td align="center">10 核</td><td align="center">32768 MB</td><td align="center">640 GB</td><td align="center">1 G</td><td align="center">6000GB &#x2F; 月</td><td align="center">$989.99 &#x2F; 月</td><td align="center"><a href="https://on.affpass.com/go/bwg/122">购买</a></td></tr><tr><td align="center">香港</td><td align="center">12 核</td><td align="center">65536 MB</td><td align="center">1280 GB</td><td align="center">1 G</td><td align="center">8000GB &#x2F; 月</td><td align="center">$1889.99 &#x2F; 月</td><td align="center"><a href="https://on.affpass.com/go/bwg/124">购买</a></td></tr><tr><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center"><strong>限时推荐，日本东京</strong></td><td align="center">1 核</td><td align="center">1GB</td><td align="center">20 GB</td><td align="center">2.5G</td><td align="center">500GB &#x2F; 月</td><td align="center"><strong>$79 &#x2F; 年</strong></td><td align="center"><a href="https://on.affpass.com/go/bwg/162">购买</a></td></tr><tr><td align="center"><strong>限时推荐，CN2 GIA</strong></td><td align="center">1 核</td><td align="center">1GB</td><td align="center">20 GB</td><td align="center">2.5G</td><td align="center">1000GB &#x2F; 月</td><td align="center"><strong>$39 &#x2F; 年</strong></td><td align="center"><a href="https://on.affpass.com/go/bwg/159">购买</a></td></tr><tr><td align="center"><strong>限时推荐，CN2 GIA</strong></td><td align="center">2 核</td><td align="center">2GB</td><td align="center">40 GB</td><td align="center">2.5G</td><td align="center">2000GB &#x2F; 月</td><td align="center"><strong>$49 &#x2F; 年</strong></td><td align="center"><a href="https://on.affpass.com/go/bwg/157">购买</a></td></tr><tr><td align="center"><strong>限时推荐，CN2 GIA</strong></td><td align="center">1 核</td><td align="center">1GB</td><td align="center">20 GB</td><td align="center">2.5G</td><td align="center">1000GB &#x2F; 月</td><td align="center"><strong>$53 &#x2F; 年</strong></td><td align="center"><a href="https://on.affpass.com/go/bwg/149">购买</a></td></tr><tr><td align="center"><strong>限时推荐，CN2 GIA</strong></td><td align="center">1 核</td><td align="center">1.5GB</td><td align="center">30 GB</td><td align="center">2.5G</td><td align="center">1500GB &#x2F; 月</td><td align="center"><strong>$45 &#x2F; 年</strong></td><td align="center"><a href="https://on.affpass.com/go/bwg/153">购买</a></td></tr><tr><td align="center"><strong>限时推荐，CN2 GIA</strong></td><td align="center">1 核</td><td align="center">768MB</td><td align="center">15 GB</td><td align="center">1.5G</td><td align="center">768GB &#x2F; 月</td><td align="center"><strong>$38 &#x2F; 年</strong></td><td align="center"><a href="https://on.affpass.com/go/bwg/145">购买</a></td></tr><tr><td align="center"><strong>限时推荐，CN2 GIA</strong></td><td align="center">1 核</td><td align="center">512MB</td><td align="center">10 GB</td><td align="center">1G</td><td align="center">500GB &#x2F; 月</td><td align="center"><strong>$49.99 &#x2F; 年</strong></td><td align="center"><a href="https://on.affpass.com/go/bwg/94">购买</a></td></tr><tr><td align="center"><strong>限时推荐，CN2 GIA</strong></td><td align="center">2 核</td><td align="center">2GB</td><td align="center">40 GB</td><td align="center">2.5G</td><td align="center">1000GB &#x2F; 月</td><td align="center"><strong>$89.90 &#x2F; 年</strong></td><td align="center"><a href="https://on.affpass.com/go/bwg/132">购买</a></td></tr><tr><td align="center"><strong>限时推荐，日本软银</strong></td><td align="center">2 核</td><td align="center">2GB</td><td align="center">40 GB</td><td align="center">2.5G</td><td align="center">2000GB &#x2F; 月</td><td align="center"><strong>$79.99 &#x2F; 年</strong></td><td align="center"><a href="https://on.affpass.com/go/bwg/146">购买</a></td></tr><tr><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">CN2 GIA</td><td align="center">2 核</td><td align="center">1 GB</td><td align="center">20 GB</td><td align="center"><strong>2.5 G</strong></td><td align="center">1000GB &#x2F; 月</td><td align="center"><strong>$49.99 &#x2F; 季</strong></td><td align="center"><a href="https://on.affpass.com/go/bwg/87">购买</a></td></tr><tr><td align="center">CN2 GIA</td><td align="center">3 核</td><td align="center">2 GB</td><td align="center">40 GB</td><td align="center"><strong>2.5 G</strong></td><td align="center">2000GB &#x2F; 月</td><td align="center">$89.99 &#x2F; 季</td><td align="center"><a href="https://on.affpass.com/go/bwg/88">购买</a></td></tr><tr><td align="center">CN2 GIA</td><td align="center">4 核</td><td align="center">4 GB</td><td align="center">80 GB</td><td align="center"><strong>2.5 G</strong></td><td align="center">3000GB &#x2F; 月</td><td align="center">$56.99 &#x2F; 月</td><td align="center"><a href="https://on.affpass.com/go/bwg/89">购买</a></td></tr><tr><td align="center">CN2 GIA</td><td align="center">6 核</td><td align="center">8 GB</td><td align="center">160 GB</td><td align="center"><strong>5 G</strong></td><td align="center">5000GB &#x2F; 月</td><td align="center">$86.99 &#x2F; 月</td><td align="center"><a href="https://on.affpass.com/go/bwg/90">购买</a></td></tr><tr><td align="center">CN2 GIA</td><td align="center">8 核</td><td align="center">16 GB</td><td align="center">320 GB</td><td align="center"><strong>5 G</strong></td><td align="center">8000GB &#x2F; 月</td><td align="center">$159.99 &#x2F; 月</td><td align="center"><a href="https://on.affpass.com/go/bwg/91">购买</a></td></tr><tr><td align="center">CN2 GIA</td><td align="center">10 核</td><td align="center">32 GB</td><td align="center">640 GB</td><td align="center"><strong>10 G</strong></td><td align="center">10000GB &#x2F; 月</td><td align="center">$289.99 &#x2F; 月</td><td align="center"><a href="https://on.affpass.com/go/bwg/92">购买</a></td></tr><tr><td align="center">CN2 GIA</td><td align="center">12 核</td><td align="center">64 GB</td><td align="center">1280 GB</td><td align="center"><strong>10 G</strong></td><td align="center">12000GB &#x2F; 月</td><td align="center">$549.99 &#x2F; 月</td><td align="center"><a href="https://on.affpass.com/go/bwg/93">购买</a></td></tr><tr><td align="center">CN2 GIA</td><td align="center">12 核</td><td align="center">64 GB</td><td align="center">1280 GB</td><td align="center"><strong>10 G</strong></td><td align="center">15000GB &#x2F; 月</td><td align="center">$679 &#x2F; 月</td><td align="center"><a href="https://on.affpass.com/go/bwg/160">购买</a></td></tr><tr><td align="center">CN2 GIA</td><td align="center">12 核</td><td align="center">64 GB</td><td align="center">1280 GB</td><td align="center"><strong>10 G</strong></td><td align="center">20000GB &#x2F; 月</td><td align="center">$899 &#x2F; 月</td><td align="center"><a href="https://on.affpass.com/go/bwg/161">购买</a></td></tr><tr><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">日本</td><td align="center">2 核</td><td align="center">2 GB</td><td align="center">40 GB</td><td align="center">1.2 G</td><td align="center">500GB &#x2F; 月</td><td align="center">$89.99 &#x2F; 月</td><td align="center"><a href="https://on.affpass.com/go/bwg/108">购买</a></td></tr><tr><td align="center">日本</td><td align="center">4 核</td><td align="center">4 GB</td><td align="center">80 GB</td><td align="center">1.2 G</td><td align="center">1000GB &#x2F; 月</td><td align="center">$159.99 &#x2F; 月</td><td align="center"><a href="https://on.affpass.com/go/bwg/109">购买</a></td></tr><tr><td align="center">日本</td><td align="center">6 核</td><td align="center">8 GB</td><td align="center">160 GB</td><td align="center">1.2G</td><td align="center">2000GB &#x2F; 月</td><td align="center">$299.99 &#x2F; 月</td><td align="center"><a href="https://on.affpass.com/go/bwg/110">购买</a></td></tr><tr><td align="center">日本</td><td align="center">8 核</td><td align="center">16 GB</td><td align="center">320 GB</td><td align="center">1.2 G</td><td align="center">4000GB &#x2F; 月</td><td align="center">$589.99 &#x2F; 月</td><td align="center"><a href="https://on.affpass.com/go/bwg/111">购买</a></td></tr><tr><td align="center">日本</td><td align="center">10 核</td><td align="center">32768 MB</td><td align="center">640 GB</td><td align="center">1.2 G</td><td align="center">6000GB &#x2F; 月</td><td align="center">$989.99 &#x2F; 月</td><td align="center"><a href="https://on.affpass.com/go/bwg/123">购买</a></td></tr><tr><td align="center">日本</td><td align="center">12 核</td><td align="center">65536 MB</td><td align="center">1280 GB</td><td align="center">1.2 G</td><td align="center">8000GB &#x2F; 月</td><td align="center">$1889.99 &#x2F; 月</td><td align="center"><a href="https://on.affpass.com/go/bwg/125">购买</a></td></tr><tr><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">迪拜</td><td align="center">2 核</td><td align="center">1 GB</td><td align="center">20 GB</td><td align="center">1 G</td><td align="center">500GB &#x2F; 月</td><td align="center">$19.99 &#x2F; 月</td><td align="center"><a href="https://on.affpass.com/go/bwg/114">购买</a></td></tr><tr><td align="center">迪拜</td><td align="center">3 核</td><td align="center">2 GB</td><td align="center">40 GB</td><td align="center">1 G</td><td align="center">1000GB &#x2F; 月</td><td align="center">$32.99 &#x2F; 月</td><td align="center"><a href="https://on.affpass.com/go/bwg/115">购买</a></td></tr><tr><td align="center">迪拜</td><td align="center">4 核</td><td align="center">4 GB</td><td align="center">80 GB</td><td align="center">1 G</td><td align="center">2000GB &#x2F; 月</td><td align="center">$56.99 &#x2F; 月</td><td align="center"><a href="https://on.affpass.com/go/bwg/116">购买</a></td></tr><tr><td align="center">迪拜</td><td align="center">6 核</td><td align="center">8 GB</td><td align="center">160 GB</td><td align="center">1 G</td><td align="center">3000GB &#x2F; 月</td><td align="center">$86.99 &#x2F; 月</td><td align="center"><a href="https://on.affpass.com/go/bwg/117">购买</a></td></tr><tr><td align="center">迪拜</td><td align="center">8 核</td><td align="center">16 GB</td><td align="center">320 GB</td><td align="center">1 G</td><td align="center">4000GB &#x2F; 月</td><td align="center">$159.99 &#x2F; 月</td><td align="center"><a href="https://on.affpass.com/go/bwg/118">购买</a></td></tr><tr><td align="center">迪拜</td><td align="center">10 核</td><td align="center">32 GB</td><td align="center">640 GB</td><td align="center">1 G</td><td align="center">5000GB &#x2F; 月</td><td align="center">$289.99 &#x2F; 月</td><td align="center"><a href="https://on.affpass.com/go/bwg/119">购买</a></td></tr><tr><td align="center">迪拜</td><td align="center">12 核</td><td align="center">64 GB</td><td align="center">1280 GB</td><td align="center">1 G</td><td align="center">6000GB &#x2F; 月</td><td align="center">$549.99 &#x2F; 月</td><td align="center"><a href="https://on.affpass.com/go/bwg/120">购买</a></td></tr><tr><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">CN2</td><td align="center">1 核</td><td align="center">1024 MB</td><td align="center">20 GB</td><td align="center">1 G</td><td align="center">1000GB &#x2F; 月</td><td align="center"><strong>$49.99 &#x2F; 年</strong></td><td align="center"><a href="https://on.affpass.com/go/bwg/57">购买</a></td></tr><tr><td align="center">CN2</td><td align="center">1 核</td><td align="center">2048 MB</td><td align="center">40 GB</td><td align="center">1 G</td><td align="center">2000GB &#x2F; 月</td><td align="center">$52.99 &#x2F; 半年</td><td align="center"><a href="https://on.affpass.com/go/bwg/58">购买</a></td></tr><tr><td align="center">CN2</td><td align="center">2 核</td><td align="center">4096 MB</td><td align="center">80 GB</td><td align="center">1 G</td><td align="center">3000GB &#x2F; 月</td><td align="center">$59.99 &#x2F; 季</td><td align="center"><a href="https://on.affpass.com/go/bwg/59">购买</a></td></tr><tr><td align="center">CN2</td><td align="center">2 核</td><td align="center">8 GB</td><td align="center">160 GB</td><td align="center">1 G</td><td align="center">5000GB &#x2F; 月</td><td align="center">$39.99 &#x2F; 月</td><td align="center"><a href="https://on.affpass.com/go/bwg/67">购买</a></td></tr><tr><td align="center">CN2</td><td align="center">3 核</td><td align="center">16 GB</td><td align="center">320 GB</td><td align="center">1 G</td><td align="center">8000GB &#x2F; 月</td><td align="center">$79.99 &#x2F; 月</td><td align="center"><a href="https://on.affpass.com/go/bwg/68">购买</a></td></tr><tr><td align="center">CN2</td><td align="center">3 核</td><td align="center">16 GB</td><td align="center">320 GB</td><td align="center">1 G</td><td align="center">12000GB &#x2F; 月</td><td align="center">$99.99 &#x2F; 月</td><td align="center"><a href="https://on.affpass.com/go/bwg/106">购买</a></td></tr><tr><td align="center">CN2</td><td align="center">3 核</td><td align="center">16 GB</td><td align="center">320 GB</td><td align="center">1 G</td><td align="center">16000GB &#x2F; 月</td><td align="center">$129.99 &#x2F; 月</td><td align="center"><a href="https://on.affpass.com/go/bwg/107">购买</a></td></tr><tr><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">普通</td><td align="center">2 核</td><td align="center">1024 MB</td><td align="center">20 GB</td><td align="center">1 G</td><td align="center">1 TB &#x2F; 月</td><td align="center"><strong>$49.99 &#x2F; 年</strong></td><td align="center"><a href="https://on.affpass.com/go/bwg/44">购买</a></td></tr><tr><td align="center">普通</td><td align="center">3 核</td><td align="center">2 GB</td><td align="center">40 GB</td><td align="center">1 G</td><td align="center">2 TB &#x2F; 月</td><td align="center">$52.99 &#x2F; 半年</td><td align="center"><a href="https://on.affpass.com/go/bwg/45">购买</a></td></tr><tr><td align="center">普通</td><td align="center">4 核</td><td align="center">4 GB</td><td align="center">80 GB</td><td align="center">1 G</td><td align="center">3 TB &#x2F; 月</td><td align="center">$19.99 &#x2F; 月</td><td align="center"><a href="https://on.affpass.com/go/bwg/46">购买</a></td></tr><tr><td align="center">普通</td><td align="center">5 核</td><td align="center">8 GB</td><td align="center">160 GB</td><td align="center">1 G</td><td align="center">4 TB &#x2F; 月</td><td align="center">$39.99 &#x2F; 月</td><td align="center"><a href="https://on.affpass.com/go/bwg/47">购买</a></td></tr><tr><td align="center">普通</td><td align="center">6 核</td><td align="center">16 GB</td><td align="center">320 GB</td><td align="center">1 G</td><td align="center">5 TB &#x2F; 月</td><td align="center">$79.99 &#x2F; 月</td><td align="center"><a href="https://on.affpass.com/go/bwg/48">购买</a></td></tr><tr><td align="center">普通</td><td align="center">7 核</td><td align="center">24 GB</td><td align="center">480 GB</td><td align="center">1 G</td><td align="center">6 TB &#x2F; 月</td><td align="center">$119.99 &#x2F; 月</td><td align="center"><a href="https://on.affpass.com/go/bwg/49">购买</a></td></tr></tbody></table><p>选择哪个套餐？如果你不知道选择哪个套餐<br>下面这是最常见的购买套餐</p><table><thead><tr><th align="center">线路</th><th align="center">CPU</th><th align="center">内存</th><th align="center">硬盘</th><th align="center">带宽</th><th align="center">流量</th><th align="center">价格</th><th align="center">链接</th></tr></thead><tbody><tr><td align="center"><strong>限时推荐，日本东京</strong></td><td align="center">1 核</td><td align="center">1GB</td><td align="center">20 GB</td><td align="center">2.5G</td><td align="center">500GB &#x2F; 月</td><td align="center"><strong>$79 &#x2F; 年</strong></td><td align="center"><a href="https://on.affpass.com/go/bwg/162">购买</a></td></tr><tr><td align="center"><strong>限时推荐，CN2 GIA</strong></td><td align="center">1 核</td><td align="center">1GB</td><td align="center">20 GB</td><td align="center">2.5G</td><td align="center">1000GB &#x2F; 月</td><td align="center"><strong>$39 &#x2F; 年</strong></td><td align="center"><a href="https://on.affpass.com/go/bwg/159">购买</a></td></tr><tr><td align="center"><strong>限时推荐，CN2 GIA</strong></td><td align="center">2 核</td><td align="center">2GB</td><td align="center">40 GB</td><td align="center">2.5G</td><td align="center">2000GB &#x2F; 月</td><td align="center"><strong>$49 &#x2F; 年</strong></td><td align="center"><a href="https://on.affpass.com/go/bwg/157">购买</a></td></tr><tr><td align="center"><strong>限时推荐，CN2 GIA</strong></td><td align="center">1 核</td><td align="center">1GB</td><td align="center">20 GB</td><td align="center">2.5G</td><td align="center">1000GB &#x2F; 月</td><td align="center"><strong>$53 &#x2F; 年</strong></td><td align="center"><a href="https://on.affpass.com/go/bwg/149">购买</a></td></tr><tr><td align="center"><strong>限时推荐，CN2 GIA</strong></td><td align="center">1 核</td><td align="center">1.5GB</td><td align="center">30 GB</td><td align="center">2.5G</td><td align="center">1500GB &#x2F; 月</td><td align="center"><strong>$45 &#x2F; 年</strong></td><td align="center"><a href="https://on.affpass.com/go/bwg/153">购买</a></td></tr><tr><td align="center"><strong>限时推荐，CN2 GIA</strong></td><td align="center">1 核</td><td align="center">768MB</td><td align="center">15 GB</td><td align="center">1.5G</td><td align="center">768GB &#x2F; 月</td><td align="center"><strong>$38 &#x2F; 年</strong></td><td align="center"><a href="https://on.affpass.com/go/bwg/145">购买</a></td></tr><tr><td align="center"><strong>限时推荐，CN2 GIA</strong></td><td align="center">1 核</td><td align="center">512MB</td><td align="center">10 GB</td><td align="center">1G</td><td align="center">500GB &#x2F; 月</td><td align="center"><strong>$49.99 &#x2F; 年</strong></td><td align="center"><a href="https://on.affpass.com/go/bwg/94">购买</a></td></tr><tr><td align="center"><strong>限时推荐，CN2 GIA</strong></td><td align="center">2 核</td><td align="center">2GB</td><td align="center">40 GB</td><td align="center">2.5G</td><td align="center">1000GB &#x2F; 月</td><td align="center"><strong>$89.90 &#x2F; 年</strong></td><td align="center"><a href="https://on.affpass.com/go/bwg/132">购买</a></td></tr><tr><td align="center"><strong>限时推荐，日本软银</strong></td><td align="center">2 核</td><td align="center">2GB</td><td align="center">40 GB</td><td align="center">2.5G</td><td align="center">2000GB &#x2F; 月</td><td align="center"><strong>$79.99 &#x2F; 年</strong></td><td align="center"><a href="https://on.affpass.com/go/bwg/146">购买</a></td></tr><tr><td align="center">普通</td><td align="center">2 核</td><td align="center">1024 MB</td><td align="center">20 GB</td><td align="center">1 G</td><td align="center">1 TB &#x2F; 月</td><td align="center"><strong>$49.99 &#x2F; 年</strong></td><td align="center"><a href="https://on.affpass.com/go/bwg/44">购买</a></td></tr><tr><td align="center">CN2</td><td align="center">1 核</td><td align="center">1024 MB</td><td align="center">20 GB</td><td align="center">1 G</td><td align="center">1000GB &#x2F; 月</td><td align="center"><strong>$49.99 &#x2F; 年</strong></td><td align="center"><a href="https://on.affpass.com/go/bwg/57">购买</a></td></tr><tr><td align="center">CN2 GIA</td><td align="center">2 核</td><td align="center">1 GB</td><td align="center">20 GB</td><td align="center"><strong>2.5 G</strong></td><td align="center">1000GB &#x2F; 月</td><td align="center"><strong>$49.99 &#x2F; 季</strong></td><td align="center"><a href="https://on.affpass.com/go/bwg/87">购买</a></td></tr><tr><td align="center">迪拜</td><td align="center">2 核</td><td align="center">1 GB</td><td align="center">20 GB</td><td align="center">1 G</td><td align="center">500GB &#x2F; 月</td><td align="center">$19.99 &#x2F; 月</td><td align="center"><a href="https://on.affpass.com/go/bwg/114">购买</a></td></tr><tr><td align="center">香港</td><td align="center">2 核</td><td align="center">2048 MB</td><td align="center">40 GB</td><td align="center">1 G</td><td align="center">500GB &#x2F; 月</td><td align="center"><strong>$89.99 &#x2F; 月</strong></td><td align="center"><a href="https://on.affpass.com/go/bwg/95">购买</a></td></tr></tbody></table><p>没有找到合适的套餐？你可以前往官网详细查看：<a href="https://on.affpass.com/go/bwg">https://bwh89.net/cart.php</a></p><p>哪个套餐好？<br>一般来说，<strong>推荐购买 香港线路</strong> 或 <strong>CN2 GIA 线路</strong>，或者哪个便宜选择那个，说着当然如果你使用量比较多或者想要分享给同学和朋友一起用的话，选择合适的套餐即可。又或者你土豪的话，选择最贵的也行。</p><p><strong>VPS 速度：香港线路 &gt; 日本线路 &gt; CN2 GIA 线路 &gt; CN2 线路 &gt; 普通线路</strong></p><p><strong>香港套餐 VPS 的速度最快。</strong> 如果你非常在乎速度的话，建议购买香港线路的 VPS，当然，但价格贵，流量相对其他套餐来说也是比较少的……退一步的选择是 <code>CN2 GIA</code> 线路，这个线路的速度也比较好。</p><p>线路是比较重要的，像香港和 CN2 GIA 线路到晚上一般不会怎么炸，普通线路的到了晚上可能会出现很慢慢的感觉。</p><p>我本人比较推荐 <code>CN2 GIA</code> 线路，稳定性，速度与价格适中选择。</p><p>当然啦！如果你觉得价格太贵了，推荐你查看一下 <a href="https://justmysocks.xyz/justmysocks-v2ray/">Just My Socks </a>，搬瓦工官方出品的代理服务，优质的 CN2 GIA 线路，<strong>每月仅需 $2.88 起！</strong>再也不用自己折腾搭建了，<strong>最最最最重要的是：被墙自动换 IP，无须担心 IP 被墙！</strong></p><p>Just My Socks 购买教程在这里： <a href="https://justmysocks.xyz/justmysocks-v2ray/">Just My Socks 购买及使用</a></p><p>毫无疑问！绝对的一分钱一分货。</p><blockquote><p>如果出现 out of stock 这样的提示，那就是这个套餐卖完了，选择其他套餐即可。</p></blockquote><h2 id="添加到购物车"><a href="#添加到购物车" class="headerlink" title="添加到购物车"></a>添加到购物车</h2><p>在上面表格中选择想要购买的套餐，然后点击 <code>购买</code> 即可。</p><p>将 VPS 添加到购物车</p><p><img src="https://camo.githubusercontent.com/df7593f684c7b0ff0f5a424ff14150dd9990723a7ca46c3ec7a1525149b1611d/68747470733a2f2f692e6c6f6c692e6e65742f323031382f31312f31382f356266313638343734323638322e706e67"></p><p>说明一下，在Billing Cycle选项那里选择：<code>$xxxx USD Annually</code>，按年付的意思</p><p><strong>推荐按年付，比按月付最高可省55%的钱</strong></p><p>如果你选择购买 <code>CN2 GIA</code> 的线路</p><p>在添加到购物车的时候，<code>Location</code> 的选项，可以选择 <code>JP - Equinix Osaka Softbank (JPOS_1)</code></p><p>这样来就是使用日本软银线路</p><p>然后点击<code>Add To Cart</code></p><h2 id="结算"><a href="#结算" class="headerlink" title="结算"></a>结算</h2><p>推荐使用搬瓦工优惠码： BWHCGLUKKB (点击复制)</p><p>这个优惠码是搬瓦工目前最高优惠的优惠码<br>输入优惠码之后点击 <code>Validate Code &gt;&gt;</code></p><p><img src="https://camo.githubusercontent.com/081dcde1b0ed07cc8b2b587020188b68264e6aa1edc8d5b141d2212887470c6c/68747470733a2f2f692e6c6f6c692e6e65742f323031382f31312f31382f356266313638343734343233632e706e67" alt="输入优惠码"></p><p>然后点击 <code>Checkout</code><br>如下图所示：已经使用搬瓦工优惠码</p><p><img src="https://camo.githubusercontent.com/40af4f146fba6a81c382f441cc71c0254720c8535832562124ef439f066a1cfd/68747470733a2f2f692e6c6f6c692e6e65742f323031382f31312f31382f356266313638343730336365632e706e67" alt="Checkout"></p><p>然后会提示你注册账号 （如果你没账号或者还没登录）<br>请按照下面图片提示来填写~</p><p><img src="https://camo.githubusercontent.com/22234f9d612da15996210613835865e75db424721a93285a652db1bc4da11541/68747470733a2f2f692e6c6f6c692e6e65742f323031382f31312f31382f356266313664613638333263362e706e67" alt="Checkout now"></p><p>要注意的是，Country 选项记得选择 <code>China</code>，Payment Method 选择 <code>Alipay</code><br>不要忘了勾上 I have read and agree to the Terms of Service<br>然后 <code>Complete Order</code></p><h2 id="付款"><a href="#付款" class="headerlink" title="付款"></a>付款</h2><p>点击 <code>Pay now</code></p><p>之后便会跳转到支付宝付款界面，完成付款即可</p><p><img src="https://camo.githubusercontent.com/444348a9901edf8eb6184ec160db8ac44a0751f3756763d501923e2a8da05bb7/68747470733a2f2f692e6c6f6c692e6e65742f323031382f31312f31382f356266313638343733323137352e706e67" alt="Pay now"></p><h2 id="获取VPS信息"><a href="#获取VPS信息" class="headerlink" title="获取VPS信息"></a>获取VPS信息</h2><p>确保你已经成功付款之后</p><p>打开：<a href="https://bwh89.net/services">https://bwh89.net/services</a></p><p>在 Manage 那选择 <code>Open KiwiVM</code></p><p>如果出现以下界面，稍等一会，等待资源分配即可。</p><p><img src="https://camo.githubusercontent.com/9529246f97450a67e9505848b13d6022ff9023fcbc1b166eee8f377732284d33/68747470733a2f2f692e6c6f6c692e6e65742f323031372f30392f30352f353961653861386663383365322e6a7067" alt="Task in progress"></p><p>等待两三分钟，刷新一下。<br>这是已经在运行的界面，请记下 <code>IP address</code>然后点击 <code>stop</code></p><p><img src="https://camo.githubusercontent.com/20c0f36659dfb982949255eb65cd7d16c974ba464d53f4fbedb7d13264c8e236/68747470733a2f2f692e6c6f6c692e6e65742f323031382f31312f31382f356266313638343733336365632e706e67" alt="停止VPS"></p><p>当出现：Great Success! Virtual server will stop in a few seconds. 相关提示</p><p>证明 VPS 已经停止了，我们需要重装一个系统。点击左边的 <code>Install new OS</code></p><p>之后选择 <code>ubuntu-22.04-x86_64</code></p><p>再勾上：<code>I agree that all existing data on my VPS will be lost.</code></p><p>然后点击 <code>Reload</code></p><p><img src="https://camo.githubusercontent.com/990ba3ae7c10022ab1c9f6263d146fdb5ced93f9e3edfb8968369dd3c3f5e967/68747470733a2f2f766970322e6c6f6c692e696f2f323032332f30352f31332f4464706f5a424a6752316a76746e462e706e67" alt="Install new OS"></p><p>当点击 <code>Reload</code> 之后，稍等片刻将会出现下图所示的界面，</p><p>请务必记下： <code>You will need a new root password to access your VPS：xxxx</code></p><p>还有：<code>New SSH Port:</code></p><p>一个是 root密码，一个是 SSH端口</p><p><img src="https://camo.githubusercontent.com/e9b1627acfd6fdfc6f32afef2eeecba1bb76c4bc0c2c93fae4bc312a7372f60f/68747470733a2f2f692e6c6f6c692e6e65742f323031382f31312f31382f356266313638343733623333642e706e67" alt="Reload"></p><p>OK，这时我们已经获取到VPS的信息了。</p><h2 id="安装-Xshell"><a href="#安装-Xshell" class="headerlink" title="安装 Xshell"></a>安装 Xshell</h2><p>Xshell 是一个易用的 SSH 客户端，要登录 VPS，当然需要 SSH 客户端</p><p><a href="https://cdn.netsarang.net/v7/Xshell-latest-p">Xshell 下载链接点我</a></p><p>下载好了就打开安装包来安装；<br><img src="https://camo.githubusercontent.com/f1870a333590c11618382d4620ff798a4b0bd3496ce49edf5e9efe2d49e6b5fb/68747470733a2f2f63646e2e73612e6e65742f323032332f31322f31382f46744f58495748534e47376c62616f2e706e67" alt="安装Xshell"></p><p>接受协议<br><img src="https://camo.githubusercontent.com/e617902707e20d3f92f0f3883b70943936354e04d2988f8908bae1bb9c5931f3/68747470733a2f2f63646e2e73612e6e65742f323032332f31322f31382f6f3141583762333973357450764b662e706e67" alt="Xshell接受协议"></p><p>选择安装文件夹<br><img src="https://camo.githubusercontent.com/cd474f7d741fd345d3bbde67d01977a9f303d94f38beca34dd7c9bf33edddeb3/68747470733a2f2f63646e2e73612e6e65742f323032332f31322f31382f584c515571665346744342374476772e706e67" alt="Xshell选择安装文件夹"></p><p>选择程序文件夹<br><img src="https://camo.githubusercontent.com/2bd90133a5045b761e9601a637524ce51d7dc0eccbbeded234215b326381f915/68747470733a2f2f63646e2e73612e6e65742f323032332f31322f31382f7133786d6f64774a466349624732482e706e67" alt="Xshell选择程序文件夹"></p><p>安装状态<br><img src="https://camo.githubusercontent.com/9965ebf3ca92b62f4e3c2be0782d7e50f42b86b9938117293937559c03f6c78b/68747470733a2f2f63646e2e73612e6e65742f323032332f31322f31382f745a786d774b4e6b326963734f4d502e706e67" alt="Xshell安装状态"></p><p>安装完成<br><img src="https://camo.githubusercontent.com/65e9e9113d07fe3a8bbdf3791dc1fc63438b357baf452db6dada4304ccb3ca80/68747470733a2f2f63646e2e73612e6e65742f323032332f31322f31382f55356d526a6465467437694344416c2e706e67" alt="Xshell安装完成"></p><p>输入名称跟邮箱来注册，之后点击提交<br><img src="https://camo.githubusercontent.com/f6aa4b0ac7ca6701b29445b8d795895e03a0b5fe8abd81c4506df4525d326ed1/68747470733a2f2f63646e2e73612e6e65742f323032332f31322f31382f6f705243386a62365647714e3459322e706e67" alt="Xshell注册"></p><p>注册完成，点击确定<br><img src="https://camo.githubusercontent.com/ce093e8db48b52494821bf68531f72c9bb218e8a23591bc28f496f4618974295/68747470733a2f2f63646e2e73612e6e65742f323032332f31322f31382f70466c344f54594857777263427a662e706e67" alt="Xshell注册完成"></p><h2 id="登录VPS"><a href="#登录VPS" class="headerlink" title="登录VPS"></a>登录VPS</h2><p><a href="https://github.com/233boy/sing-box/wiki/sing-box%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B#%E7%99%BB%E5%BD%95vps"></a></p><p>在 Xshell 新建一个会话。</p><p><img src="https://camo.githubusercontent.com/92976e0d94f83b466f8b726c33b020dd73c894c3147e4260e744af2084e42a1c/68747470733a2f2f692e6c6f6c692e6e65742f323031382f31322f32372f356332346630633864373866362e6a7067" alt="新建会话"></p><p>主机写上你的 VPS IP 地址，端口写上 SSH 端口。</p><p><img src="https://camo.githubusercontent.com/4fb7b8bb7f9c9660cf10cf89f7e373bdf70d791cfda8fda78e7c1b51aad4663d/68747470733a2f2f692e6c6f6c692e6e65742f323031382f31312f31382f356266313638343733353737362e706e67" alt="new"></p><p>之后点击 用户身份验证，用户名：<code>root</code>，密码：你的 root 密码。然后点击确定</p><p><img src="https://camo.githubusercontent.com/49e4b0f24081dc9354f130820eea0e6570966f95c2502fb8aa7c01fe34506caf/68747470733a2f2f692e6c6f6c692e6e65742f323031382f31312f31382f356266313638343733376633632e706e67" alt="user-and-passwd"></p><p>之后选择连接。</p><p><img src="https://camo.githubusercontent.com/9b5077714d6b9005d7933634852cb0733eaf27fd6278c67a8251949ea3094ad3/68747470733a2f2f692e6c6f6c692e6e65742f323031382f31312f31382f356266313638343733396161622e706e67" alt="连接"></p><p>然后会提示SSH安全警告，选择，接受并保存。</p><p><img src="https://camo.githubusercontent.com/e45ab83d7ab9cb5864aab7f01e74107dfb1c2936cf2c924bb5d84c2c053dcedd/68747470733a2f2f692e6c6f6c692e6e65742f323031382f31312f31382f356266313566346230346337322e706e67" alt="SSH 安全警告"></p><p>这是登录成功后的界面</p><p><img src="https://camo.githubusercontent.com/f4bd87e762141bcdb7e38b12f75e33778b0d24c18929cbfd9c795444723d4a39/68747470733a2f2f692e6c6f6c692e6e65742f323031382f31312f31382f356266313566346230636433332e706e67" alt="登陆成功"></p><h2 id="安装-sing-box"><a href="#安装-sing-box" class="headerlink" title="安装 sing-box"></a>安装 sing-box</h2><p>输入下面命令回车，你可以复制过去，然后在 Xshell 界面按 Shift + Insert 即可粘贴，不能按 Ctrl + V 的。。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(wget -qO- -o- https://github.com/233boy/sing-box/raw/main/install.sh)</span><br></pre></td></tr></table></figure><h2 id="安装完成"><a href="#安装完成" class="headerlink" title="安装完成"></a>安装完成</h2><p>当你执行了上面的安装命令，并且没有错误提示的话，那么你就能看到类似下面的图片</p><p><img src="https://camo.githubusercontent.com/a9f39eb376ae595d2eef1e7c2af9005a383b950db7f8a72e58fdf1773b0458cc/68747470733a2f2f63646e2e73612e6e65742f323032342f30352f32322f74554e337a704a637778736236354f2e706e67" alt="sing-box 脚本安装完成"></p><p>脚本特意弄了一个时间显示，给反馈用来检测安装时间的…</p><p>理论上，绝大多数情况下 15秒内会安装完成</p><p>为方便你快速使用，脚本在安装完成后会自动创建一个 VLESS-REALITY 配置</p><p>此时你可以复制 URL 到相关软件 (例如 v2rayN) 去测试一下是否正常使用。</p><p>如果无法正常使用，请尝试使用 <code>sb add ss auto auto aes-256-gcm</code> 添加一个 SS 来再测试一下</p><h2 id="sing-box-管理面板"><a href="#sing-box-管理面板" class="headerlink" title="sing-box 管理面板"></a>sing-box 管理面板</h2><p>现在可以尝试一下输入 <code>sb</code> 回车，即可管理 sing-box</p><p><img src="https://camo.githubusercontent.com/a84c9f810b011b461918bed1cd64fed9e2f457936d58ae9ca53812382aaf88dd/68747470733a2f2f63646e2e73612e6e65742f323032342f30352f32322f696a7a3653617770585564737237342e706e67" alt="sing-box 脚本管理面板"></p><p>提示，如果你不想执行任何功能，直接按 Enter 回车退出即可。</p><p>为方便输入，脚本自动创建 <code>sb</code> 快捷输入命令用来代替 <code>sb</code> （sing-box 太长了都</p><h2 id="无法使用"><a href="#无法使用" class="headerlink" title="无法使用"></a>无法使用</h2><p>无法使用一般都是两种情况，一是无法连接上端口，二是客户端内核支持有问题。</p><p>如果你的 VPS 有外部防火墙，请确保你已经开放了端口</p><p>测试端口是否能连接上：</p><p>打开：<a href="https://tcp.ping.pe/">https://tcp.ping.pe/</a></p><p>写上你的 VPS IP 跟端口；内容为 ip:端口，示例：<code>1.1.1.1:443</code>，然后点击 <code>Go</code>；或者直接回车</p><p>如果显示 successful；证明端口能连接；如果显示 failed；那是无法连接上端口。</p><p>提醒，你可以使用 <code>sb ip</code> 查看 VPS IP。</p><p>关闭防火墙，执行如下命令：</p><p><code>systemctl stop firewalld; systemctl disable firewalld; ufw disable</code></p><p>关闭防火墙之后再测试一下端口是否通，如果不通，你可能还有外部防火墙没关，<strong>必须要能连接上端口才能正常使用</strong>。</p><p>如果能连接上端口，那就继续</p><p>使用 <code>sb add ss auto auto aes-256-gcm</code> 添加一个 SS 看看能不能正常使用，如果正常使用，证明运行没有问题。</p><p>提醒，默认安装的 sing-box 内核为最新版本</p><p>如果无法使用，可能是你客户端的内核太旧</p><p>请尝试使用不同的客户端进行测试；比如 v2rayN；v2rayNG 等</p><p>请尝试设置 VMessAEAD，某些客户端会有相关选项</p><p>某些客户端得把 额外id(alterid) 填写为 0；比如垃圾苹果那边的东西</p><p>请更新你的客户端 sing-box 内核跟服务器端版本保持一致！</p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>本人的 sing-box 脚本简化了很多流程，例如我们常用的是 (添加、更改、查看、删除) 配置，以下内容让你可以快速掌握使用</p><p>添加配置：</p><ul><li><code>sb add</code> -&gt; 添加配置</li><li><code>sb add reality</code> -&gt; 添加一个 VLESS-REALITY 配置</li><li><code>sb add reality 443 auto dl.google.com</code> -&gt; 同上，自定义参数：端口使用 443， SNI 使用 dl.google.com</li><li><code>sb add hy</code> -&gt; 添加一个 Hysteria2 配置</li><li><code>sb add ss</code> -&gt; 添加一个 Shadowsocks 2022 配置</li><li><code>sb add tcp</code> -&gt; 添加一个 VMess-TCP 配置</li><li><code>sb add tuic</code> -&gt; 添加一个 TUIC配置</li></ul><p>备注，使用 <code>sb add</code> 添加配置的时候，仅 *TLS 相关协议配置必须提供域名，其他均可自动化处理。</p><p>如需查看更多 add 参数用法，请查看下面的 sing-box 脚本说明</p><p>–</p><p>更改配置：</p><ul><li><code>sb change</code> -&gt; 更改配置</li><li><code>sb change reality</code> -&gt; 更改 REALITY 相关配置</li><li><code>sb change reality sni 1.1.1.1</code> -&gt; 更改 REALITY 相关配置的 SNI 为 1.1.1.1, 也可以使用 <code>sb sni reality 1.1.1.1</code></li><li><code>sb change tcp</code> -&gt; 更改 TCP 相关配置</li><li><code>sb change tcp port auto</code> -&gt; 更改 TCP 相关配置的端口，端口使用自动创建，也可以使用 <code>sb port tcp auto</code></li><li><code>sb change tuic id auto</code> -&gt; 更改 tuic 相关配置的 UUID，UUID 使用自动创建，也可以使用 <code>sb id tuic auto</code></li></ul><p>如需查看更多 change 参数用法，请查看下面的 sing-box 脚本说明</p><p>–</p><p>查看配置：</p><ul><li><code>sb info</code> -&gt; 查看配置</li><li><code>sb info REALITY</code> -&gt; 查看 REALITY 相关配置</li><li><code>sb info tcp</code> -&gt; 查看 TCP 相关配置</li></ul><p>–</p><p>删除配置：</p><ul><li><code>sb del</code> -&gt; 删除配置</li><li><code>sb del REALITY</code> -&gt; 删除 REALITY 相关配置</li><li><code>sb del tcp</code> -&gt; 删除 TCP 相关配置</li></ul><p><strong>提醒，谨慎使用 del 参数</strong></p><p>–</p><p>非常棒！你已经掌握最常用的功能 (添加、更改、查看、删除)</p><p>add &#x2F; change &#x2F; info &#x2F; del ： 添加、更改、查看、删除</p><p>对于绝大多数用户来说</p><p>使用 <code>sb add</code> 添加配置，使用 <code>sb change</code> <code>sb info</code> <code>sb del</code> 来 (更改、查看、删除) 配置即可。</p><blockquote><p>提醒，如果只匹配到一个配置时则自动选择该配置，否则将显示匹配到的配置列表，要求选择其中一个配置</p></blockquote><h2 id="打开-BBR-优化"><a href="#打开-BBR-优化" class="headerlink" title="打开 BBR 优化"></a>打开 BBR 优化</h2><p>使用：<code>sb bbr</code> 便会自动打开 BBR 优化了！非常简单方便</p><h2 id="VLESS-REALITY"><a href="#VLESS-REALITY" class="headerlink" title="VLESS-REALITY"></a>VLESS-REALITY</h2><p>实现 VLESS-REALITY 超级无敌简单的好吧，拜托！</p><p>输入 <code>sb add reality</code> 回车，即可！</p><p>什么偷证书，没有的事，别瞎说</p><h2 id="Hysteria2"><a href="#Hysteria2" class="headerlink" title="Hysteria2"></a>Hysteria2</h2><p>输入 <code>sb add hy</code> 回车，即可！</p><h2 id="TUIC"><a href="#TUIC" class="headerlink" title="TUIC"></a>TUIC</h2><p>输入 <code>sb add tuic</code> 回车，即可！</p><h2 id="VMess-WS-TLS"><a href="#VMess-WS-TLS" class="headerlink" title="VMess-WS-TLS"></a>VMess-WS-TLS</h2><p>实现 VMess-WS-TLS 超级无敌简单，前提是要拥有一个能正常解析的域名 (并且知道怎么解析域名)</p><p>服务器输入 <code>sb add wss</code> 回车，输入域名，搞定。</p><h2 id="VLESS-H2-TLS"><a href="#VLESS-H2-TLS" class="headerlink" title="VLESS-H2-TLS"></a>VLESS-H2-TLS</h2><p>实现 VLESS-H2-TLS 超级无敌简单，前提是要拥有一个能正常解析的域名 (并且知道怎么解析域名)</p><p>服务器输入 <code>sb add vh2</code> 回车，输入域名，搞定。</p><p>备注，VLESS-H2-TLS 相比 VMess-WS-TLS，在浏览网页时有一些优势，速度是差不多的啦</p><h2 id="Trojan-HTTPUpgrade-TLS"><a href="#Trojan-HTTPUpgrade-TLS" class="headerlink" title="Trojan-HTTPUpgrade-TLS"></a>Trojan-HTTPUpgrade-TLS</h2><p>实现 Trojan-HTTPUpgrade-TLS 超级无敌简单，前提是要拥有一个能正常解析的域名 (并且知道怎么解析域名)</p><p>服务器输入 <code>sb add thu</code> 回车，输入域名，搞定。</p><p>和其他 *TLS 配置的速度差异？有人说快，有人说慢，你自己对比吧</p><h2 id="哪个传输协议好？"><a href="#哪个传输协议好？" class="headerlink" title="哪个传输协议好？"></a>哪个传输协议好？</h2><p>心中无杂念，用 TCP</p><p>VPS速度不好，用 TUIC &#x2F; Hysteria2</p><p>处子之身，用 VLESS-REALITY</p><h2 id="sing-box-脚本说明"><a href="#sing-box-脚本说明" class="headerlink" title="sing-box 脚本说明"></a>sing-box 脚本说明</h2><p>请看：<a href="https://github.com/233boy/sing-box/wiki/sing-box%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC">sing-box一键安装脚本</a></p><p>哎呀，虽然脚本很好用，但是为了你能更加了解掌握各种使用技巧，还是建议看一虾吧！</p><h2 id="sing-box-脚本帮助"><a href="#sing-box-脚本帮助" class="headerlink" title="sing-box 脚本帮助"></a>sing-box 脚本帮助</h2><p>使用：<code>sb help</code></p><h2 id="反馈问题"><a href="#反馈问题" class="headerlink" title="反馈问题"></a>反馈问题</h2><p>Telegram 群组：<a href="https://t.me/tg233boy">https://t.me/tg233boy</a></p><p>Github 反馈：<a href="https://github.com/233boy/sing-box/issues">https://github.com/233boy/sing-box/issues</a></p><h2 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h2><p>如果这篇文章对你帮助的话，记得分享给你的小伙伴们哦！</p><h2 id="机场备用"><a href="#机场备用" class="headerlink" title="机场备用"></a>机场备用</h2><p>为防止自建节点不可用，推荐购买一个机场作为备用方案，以防止失联</p><p>机场推荐： <a href="https://github.com/233boy/v2ray/wiki/justmysocks%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E8%B4%AD%E4%B9%B0%E6%95%99%E7%A8%8B">Just My Socks</a></p><p><a href="https://github.com/233boy/v2ray/wiki/justmysocks%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E8%B4%AD%E4%B9%B0%E6%95%99%E7%A8%8B">Just My Socks</a> 是搬瓦工提供的服务，不怕跑路，非国人商家，无须担心 IP 被墙问题。</p><p>购买教程：<a href="https://github.com/233boy/v2ray/wiki/justmysocks%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E8%B4%AD%E4%B9%B0%E6%95%99%E7%A8%8B">Just My Socks 详细图文购买教程</a></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>请勿违反国家法律法规，否则后果自负！</p><p>低调低调低调。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> VPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 KernelSU Next + Susfs 进行 Android 设备 Root</title>
      <link href="/2025/07/13/%E4%BD%BF%E7%94%A8%20KernelSU%20Next%20+%20Susfs%20%E8%BF%9B%E8%A1%8C%20Android%20%E8%AE%BE%E5%A4%87%20Root/"/>
      <url>/2025/07/13/%E4%BD%BF%E7%94%A8%20KernelSU%20Next%20+%20Susfs%20%E8%BF%9B%E8%A1%8C%20Android%20%E8%AE%BE%E5%A4%87%20Root/</url>
      
        <content type="html"><![CDATA[<p>本文档整理了使用 <strong>KernelSU Next APK</strong> 和 <strong>Susfs</strong> 实现 Android 设备 root 并进行隐藏的步骤，适用于支持 GKI（通用内核映像）的现代 Android 设备（如 Android 13 或更高版本，内核 5.10 或以上）。本指南简化了复杂流程，适合初学者，但 root 操作有风险（如软砖或启动循环），请谨慎操作并备份数据。</p><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ul><li><strong>设备兼容性</strong>：确认设备支持 <strong>KernelSU Next APK</strong>（通常为 Android 13+，内核 5.10+）。某些品牌（如 OnePlus）原生使用 GKI 内核；其他 <strong>野核</strong> 设备可能需要额外研究。</li><li><strong>备份</strong>：在开始前，备份所有重要数据（照片、文件等），以防数据丢失或设备变砖。</li><li><strong>工具准备</strong>：<ul><li>下载 <strong>KernelSU Next APK</strong> 从 <a href="https://github.com/KernelSU-Next/KernelSU-Next">KernelSU Next</a> 或其他可信来源。</li><li>下载 <strong>KernelFlasher</strong> 应用或 <strong>EX Kernal Manager</strong>（用于系统内刷写内核）。</li><li>准备存储空间（设备内、USB-C 闪存盘、SD 卡或云端如 Google Drive）用于备份镜像。</li></ul></li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="1-安装-KSU-Next-Manager-并修补-init-boot"><a href="#1-安装-KSU-Next-Manager-并修补-init-boot" class="headerlink" title="1. 安装 KSU Next Manager 并修补 init_boot"></a>1. 安装 KSU Next Manager 并修补 init_boot</h3><ul><li>下载并安装 <a href="https://github.com/KernelSU-Next/KernelSU-Next"><strong>KernelSU Next</strong></a> 。</li><li>打开应用，立即修补 <strong>init_boot</strong>（无需理会其他建议，直接操作）。</li><li>修补完成后，重启到fastboot进行刷写设备以获得 root 权限。</li></ul><h3 id="2-匹配内核版本"><a href="#2-匹配内核版本" class="headerlink" title="2. 匹配内核版本"></a>2. 匹配内核版本</h3><ul><li>打开 KSU Next Manager，查看设备内核版本（例如，5.15.149，Android 13）。</li><li>访问 <a href="https://github.com/KernelSU-Next/KernelSU-Next">KernelSU Next</a>，找到与你的内核版本和 Android 版本（例如，a13 表示 Android 13）匹配的内核映像。<ul><li><strong>注意</strong>：忽略内核版本末尾的构建号（如 .149），重点匹配主要版本（如 5.15）和 Android 版本（如 a13）。</li><li>如果找不到完全匹配的内核，确保选择不低于 5.10 的版本（低于此版本可能导致启动循环或软砖）。</li><li>某些品牌（如 OnePlus）原生使用 GKI 内核，可能无需额外寻找。</li></ul></li></ul><h3 id="3-使用-KernelFlasher-刷写内核"><a href="#3-使用-KernelFlasher-刷写内核" class="headerlink" title="3. 使用 KernelFlasher 刷写内核"></a>3. 使用 KernelFlasher 刷写内核</h3><ul><li>下载并安装 <a href="https://github.com/capntrips/KernelFlasher"><strong>KernelFlasher</strong></a> 应用（目前没怎么更新）。或使用Google Play的 <strong>EX Kernal Manager</strong></li><li>授予 KernelFlasher root 权限。</li><li>在 KernelFlasher 中查看设备分区槽（slot A 和 slot B）。</li><li>选择从 GitHub 下载的内核映像 ZIP 文件，直接在系统内刷写（无需 ADB 或自定义 recovery）。</li><li><strong>备份</strong>：<ul><li>在刷写前，使用 KernelFlasher 备份所有关键镜像（如 init_boot、boot、vendorboot、recovery、dtbo 等）。</li><li>将备份压缩并存储到 Google Drive、USB-C 闪存盘、SD 卡或电脑。</li></ul></li><li>刷写内核后，重启设备。此时设备应从可加载内核模块转换为 GKI2 模式。</li></ul><h3 id="4-刷写并启用-Susfs"><a href="#4-刷写并启用-Susfs" class="headerlink" title="4. 刷写并启用 Susfs"></a>4. 刷写并启用 <a href="https://github.com/sidex15/susfs4ksu-module">Susfs</a></h3><ul><li>如果内核映像已集成 Susfs，刷写后 Susfs 会出现在 KSU Next Manager 的模块列表中。</li><li>如果未集成，单独下载 Susfs 模块并通过 KernelFlasher 刷写。</li><li>在 KSU Next Manager 中授予 Susfs root 权限，启用模块（滑动开关），然后重启设备。</li><li><strong>注意</strong>：建议先刷写内核并重启，再刷写 Susfs 并重启，以确保稳定性。某些设备（如 OnePlus）可同时刷写，但初学者不推荐尝试。</li></ul><h3 id="5-隐藏-Root-痕迹"><a href="#5-隐藏-Root-痕迹" class="headerlink" title="5. 隐藏 Root 痕迹"></a>5. 隐藏 Root 痕迹</h3><ul><li>成功刷写 GKI 和 Susfs 后，Susfs 可隐藏 root 痕迹（包括 LSPosed 模块等）。</li><li>测试 root 是否隐藏（运行需检测 root 的应用，确认无提示）。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><strong>不兼容设备</strong>：某些品牌或型号可能没有匹配的内核版本，需在 KernelSU GitHub、XDA 论坛或 subreddit 搜索。不要使用低于 5.10 的内核。</li><li><strong>无 init_boot 的设备</strong>：部分设备原生使用 GKI，无需修补 init_boot，但需刷写修改后的 GKI 内核以获得 root。</li><li><strong>备份的重要性</strong>：若未备份镜像且设备变砖，需下载当前固件包，重刷所有镜像，并可能需格式化。</li><li><strong>品牌差异</strong>：三星等设备对刷写敏感，需格外小心；OnePlus 等设备相对简单。</li></ul><h2 id="故障排除"><a href="#故障排除" class="headerlink" title="故障排除"></a>故障排除</h2><ul><li><strong>启动循环或软砖</strong>：<ul><li>恢复备份的镜像（通过 KernelFlasher 或 fastboot）。</li><li>若无备份，下载官方固件包，重刷镜像（boot、recovery 等），尝试启动。</li><li>若仍失败，可能需格式化，但可能导致进入 bootloader 或 EDL 模式，修复难度较大。</li></ul></li><li><strong>找不到匹配内核</strong>：<ul><li>在 KernelSU GitHub、XDA 论坛或 subreddit 搜索设备型号。</li><li>确保内核版本不低于 5.10，且 Android 版本匹配。</li></ul></li><li><strong>Susfs 未生效</strong>：<ul><li>确认模块已启用并重启。</li><li>检查是否正确授予 root 权限。</li></ul></li></ul><h2 id="额外建议"><a href="#额外建议" class="headerlink" title="额外建议"></a>额外建议</h2><ul><li><strong>学习与研究</strong>：建议阅读 <a href="https://github.com/tiann/KernelSU">KernelSU 官方文档</a> 或 XDA 论坛帖子。</li><li><strong>社区支持</strong>：如遇问题，可在 KernelSU Discord 或相关 subreddit 求助，谨慎对待不可靠建议。</li><li><strong>安全第一</strong>：不确定的情况下，先暂停操作，确认后再继续。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Windows 上安装和配置 WSL（适用于 Linux 的 Windows 子系统）</title>
      <link href="/2025/05/17/%E5%9C%A8%20Windows%20%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE%20WSL%EF%BC%88%E9%80%82%E7%94%A8%E4%BA%8E%20Linux%20%E7%9A%84%20Windows%20%E5%AD%90%E7%B3%BB%E7%BB%9F%EF%BC%89/"/>
      <url>/2025/05/17/%E5%9C%A8%20Windows%20%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE%20WSL%EF%BC%88%E9%80%82%E7%94%A8%E4%BA%8E%20Linux%20%E7%9A%84%20Windows%20%E5%AD%90%E7%B3%BB%E7%BB%9F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="在-Windows-上安装和配置-WSL（适用于-Linux-的-Windows-子系统）"><a href="#在-Windows-上安装和配置-WSL（适用于-Linux-的-Windows-子系统）" class="headerlink" title="在 Windows 上安装和配置 WSL（适用于 Linux 的 Windows 子系统）"></a>在 Windows 上安装和配置 WSL（适用于 Linux 的 Windows 子系统）</h1><p>本教程将指导你在 Windows 10 或 Windows 11 上安装适用于 Linux 的 Windows 子系统（WSL），并提供解决安装过程中可能遇到的错误代码 <strong>0x8024001e</strong> 的方法。</p><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ul><li><strong>操作系统</strong>：Windows 10 版本 2004 或更高，或 Windows 11。</li><li><strong>管理员权限</strong>：需要以管理员身份运行命令。</li><li><strong>磁盘空间</strong>：至少 5GB 可用空间用于安装 WSL 和 Linux 发行版。</li></ul><h2 id="步骤-1：启用-WSL-和虚拟机平台"><a href="#步骤-1：启用-WSL-和虚拟机平台" class="headerlink" title="步骤 1：启用 WSL 和虚拟机平台"></a>步骤 1：启用 WSL 和虚拟机平台</h2><ol><li>以管理员身份打开 <strong>命令提示符</strong>（搜索 <code>cmd</code>，右键选择“以管理员身份运行”）。</li><li>运行以下命令启用 WSL 和虚拟机平台：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>dism.exe &#x2F;online &#x2F;enable-feature &#x2F;featurename:Microsoft-Windows-Subsystem-Linux &#x2F;all &#x2F;norestart<br>dism.exe &#x2F;online &#x2F;enable-feature &#x2F;featurename:VirtualMachinePlatform &#x2F;all &#x2F;norestart</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3. 重启系统以应用更改。</span><br><span class="line"></span><br><span class="line">## 步骤 2：安装 WSL</span><br><span class="line">1. 打开 **命令提示符** 或 **PowerShell**（以管理员身份）。</span><br><span class="line">2. 运行以下命令自动安装 WSL 及默认的 Ubuntu 发行版：</span><br></pre></td></tr></table></figure><p>wsl –install</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3. 安装完成后，重启系统。</span><br><span class="line">4. WSL 将自动配置 Ubuntu，首次启动时需要设置用户名和密码。</span><br><span class="line"></span><br><span class="line">## 步骤 3：验证安装</span><br><span class="line">1. 打开命令提示符，运行：</span><br></pre></td></tr></table></figure><p>wsl –list –all</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">你应该看到已安装的 Linux 发行版（如 Ubuntu）。</span><br><span class="line">2. 运行以下命令检查 WSL 版本：</span><br></pre></td></tr></table></figure><p>wsl –version</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3. 设置 WSL 2 为默认版本（推荐）：</span><br></pre></td></tr></table></figure><p>wsl –set-default-version 2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">## 解决错误代码 0x8024001e</span><br><span class="line">如果在安装过程中遇到错误 **0x8024001e**（通常与 Windows Update 相关），请按照以下步骤排查：</span><br><span class="line"></span><br><span class="line">### 1. 重启 Windows Update 服务</span><br><span class="line">- 以管理员身份运行命令提示符，执行：</span><br></pre></td></tr></table></figure><p>net stop wuauserv<br>net start wuauserv</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 再次运行 `wsl --install`。</span><br><span class="line"></span><br><span class="line">### 2. 清除 Windows Update 缓存</span><br><span class="line">- 停止 Windows Update 服务：</span><br></pre></td></tr></table></figure><p>net stop wuauserv</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- 删除 `C:\Windows\SoftwareDistribution` 文件夹中的所有内容。</span><br><span class="line">- 重启服务：</span><br></pre></td></tr></table></figure><p>net start wuauserv</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- 重新尝试安装 WSL。</span><br><span class="line"></span><br><span class="line">### 3. 安装最新 Windows 更新</span><br><span class="line">- 打开 **设置 &gt; Windows 更新**，安装所有待处理的更新。</span><br><span class="line">- 重启系统后再次运行 `wsl --install`。</span><br><span class="line"></span><br><span class="line">### 4. 手动安装 WSL 更新包</span><br><span class="line">- 从 [Microsoft WSL GitHub](https://github.com/microsoft/WSL) 下载最新的 `.msixbundle` 文件。</span><br><span class="line">- 以管理员身份打开 PowerShell，运行：</span><br></pre></td></tr></table></figure><p>Add-AppxPackage .\path\to\wsl_update_x64.msixbundle</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- 验证安装：`wsl --status`。</span><br><span class="line"></span><br><span class="line">### 5. 检查系统文件</span><br><span class="line">- 以管理员身份运行：</span><br></pre></td></tr></table></figure><p>sfc &#x2F;scannow</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- 如果问题未解决，继续运行：</span><br></pre></td></tr></table></figure><p>DISM &#x2F;Online &#x2F;Cleanup-Image &#x2F;RestoreHealth</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 重启后重新尝试安装。</span><br><span class="line"></span><br><span class="line">## 步骤 4：安装其他 Linux 发行版（可选）</span><br><span class="line">1. 打开 **Microsoft Store**，搜索并安装其他 Linux 发行版（如 Debian、Kali Linux）。</span><br><span class="line">2. 或者使用命令安装：</span><br></pre></td></tr></table></figure><p>wsl –install -d &lt;发行版名称&gt;</p><p>示例：<code>wsl --install -d Debian</code>。</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ul><li><strong>WSL 命令无响应</strong>：确保 WSL 已正确启用且系统已重启。</li><li><strong>错误 0x80070003</strong>：检查磁盘空间或重新下载 WSL 更新包。</li><li><strong>无法访问 Linux 文件</strong>：在文件资源管理器中，Linux 文件位于 <code>\\wsl$\&lt;发行版名称&gt;</code>。</li></ul><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>通过以上步骤，你应该能够在 Windows 上成功安装和配置 WSL，并解决错误 <strong>0x8024001e</strong>。如果问题仍未解决，请运行 <code>wsl --status</code> 和 <code>wsl --version</code>，并检查详细错误信息。</p><p>如需更多帮助，请参考 <a href="https://learn.microsoft.com/zh-cn/windows/wsl/">Microsoft WSL 官方文档</a>。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ollama 使用环境变量</title>
      <link href="/2025/04/12/Ollama%E4%BD%BF%E7%94%A8%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
      <url>/2025/04/12/Ollama%E4%BD%BF%E7%94%A8%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<p>glmos-code-explain# Ollama 环境变量设置</p><p>Ollama 使用环境变量来配置其行为，这包括模型文件的存储位置、运行时目录、网络设置、性能调优等。通过设置这些变量，您可以根据自己的需求和环境自定义 Ollama 的运行方式。</p><h2 id="快速参考：常用环境变量"><a href="#快速参考：常用环境变量" class="headerlink" title="快速参考：常用环境变量"></a>快速参考：常用环境变量</h2><table><thead><tr><th>环境变量</th><th>描述</th><th>默认值 (可能因系统&#x2F;安装方式而异)</th><th>示例值</th></tr></thead><tbody><tr><td><code>OLLAMA_MODELS</code></td><td><strong>(最常用)</strong> 指定模型存储目录的路径 (blobs 和 manifests)</td><td>Linux (systemd):<code>/usr/share/ollama/.ollama/models</code><br>Linux (user): <code>~/.ollama/models</code><br>macOS: <code>~/.ollama/models</code><br>Windows: <code>%USERPROFILE%\.ollama\models</code></td><td><code>/data/ollama_models</code> 或 <code>D:\OllamaModels</code></td></tr><tr><td><code>OLLAMA_HOST</code></td><td>设置 Ollama 服务监听的网络地址和端口</td><td><code>127.0.0.1:11434</code> (仅本地)</td><td><code>0.0.0.0:11434</code> (所有接口)</td></tr><tr><td><code>OLLAMA_ORIGINS</code></td><td>配置允许访问 Ollama API 的跨域来源 (CORS)，逗号分隔</td><td><code>http://localhost</code>, <code>http://localhost:*</code>, <code>http://127.0.0.1</code>, <code>http://127.0.0.1:*</code>, <code>app://*</code></td><td><code>http://yourapp.com,http://localhost:8080</code></td></tr><tr><td><code>OLLAMA_KEEP_ALIVE</code></td><td>控制模型在内存中保持活动状态的时间 (单位: s, m, h; -1&#x3D;永久)</td><td><code>5m</code></td><td><code>30m</code> 或 <code>-1</code></td></tr><tr><td><code>OLLAMA_MAX_LOADED_MODELS</code></td><td>可同时加载到内存&#x2F;显存的最大模型数量</td><td>视 GPU 数量或 CPU 推理而定 (如<code>1</code>)</td><td><code>3</code></td></tr><tr><td><code>OLLAMA_NUM_PARALLEL</code></td><td>每个已加载模型可同时处理的并行请求数</td><td>未明确指定，依赖内部逻辑</td><td><code>4</code></td></tr><tr><td><code>OLLAMA_MAX_QUEUE</code></td><td>请求队列的最大长度，超出时返回 503 错误</td><td><code>512</code></td><td><code>1024</code></td></tr><tr><td><code>OLLAMA_FLASH_ATTENTION</code></td><td>(实验性) 启用 Flash Attention 优化 (若 GPU 支持)</td><td><code>0</code> (禁用)</td><td><code>1</code> (启用)</td></tr><tr><td><code>OLLAMA_KV_CACHE_TYPE</code></td><td>设置键&#x2F;值缓存的量化类型以减少内存占用</td><td><code>f16</code></td><td><code>q8_0</code> 或 <code>q4_0</code></td></tr><tr><td><code>OLLAMA_DEBUG</code></td><td>启用调试模式，增加日志输出</td><td>未启用 (<code>0</code>)</td><td><code>1</code> (启用)</td></tr><tr><td><code>HTTPS_PROXY</code></td><td>设置用于下载模型的 HTTPS 代理服务器地址</td><td>无</td><td><code>https://user:pass@proxy.example.com:8080</code></td></tr><tr><td><code>OLLAMA_RUNNERS_DIR</code></td><td>(较少用) 指定查找和存储 Runner 二进制文件的目录</td><td>通常由 Ollama 内部管理</td><td><code>/path/to/custom/ollama_runners</code></td></tr></tbody></table><hr><h2 id="详细说明"><a href="#详细说明" class="headerlink" title="详细说明"></a>详细说明</h2><h3 id="核心路径变量"><a href="#核心路径变量" class="headerlink" title="核心路径变量"></a>核心路径变量</h3><h4 id="OLLAMA-MODELS"><a href="#OLLAMA-MODELS" class="headerlink" title="OLLAMA_MODELS"></a><code>OLLAMA_MODELS</code></h4><ul><li><strong>作用</strong>: 指定 Ollama 存储下载的模型文件（blobs 和 manifests）的根目录。这是最重要的路径配置变量。</li><li><strong>默认值</strong>:<ul><li>Linux: <code>/usr/share/ollama/.ollama/models</code> (当作为 systemd 服务运行时) 或 <code>~/.ollama/models</code> (当作为当前用户运行时)。</li><li>macOS: <code>~/.ollama/models</code></li><li>Windows: <code>C:\Users\&lt;username&gt;\.ollama\models</code> (即 <code>%USERPROFILE%\.ollama\models</code>)</li></ul></li><li><strong>用途</strong>: 如果你想将模型存储在不同的磁盘驱动器或自定义位置（例如，一个具有更大空间的外部硬盘），必须设置此变量。</li><li><strong>示例</strong>:<ul><li>Linux&#x2F;macOS (bash&#x2F;zsh): <code>export OLLAMA_MODELS=/path/to/your/ollama_models</code></li><li>Windows (CMD): <code>set OLLAMA_MODELS=D:\ollama_models</code></li><li>Windows (PowerShell): <code>$env:OLLAMA_MODELS = &quot;D:\ollama_models&quot;</code></li></ul></li></ul><h4 id="OLLAMA-RUNNERS-DIR"><a href="#OLLAMA-RUNNERS-DIR" class="headerlink" title="OLLAMA_RUNNERS_DIR"></a><code>OLLAMA_RUNNERS_DIR</code></h4><ul><li><strong>作用</strong>: (较少使用) 指定 Ollama 查找和存储其运行时（runners）二进制文件的目录，这些运行时用于执行模型（特别是 GPU 加速相关的）。</li><li><strong>默认值</strong>: 通常位于 Ollama 安装目录下或者其内部管理的路径中，对普通用户透明。</li><li><strong>用途</strong>: 主要用于开发或特殊部署场景，例如当你需要使用自定义编译的 runner 时。普通用户一般不需要设置此变量。</li><li><strong>示例</strong>:<ul><li>Linux&#x2F;macOS (bash&#x2F;zsh): <code>export OLLAMA_RUNNERS_DIR=/path/to/custom/ollama_runners</code></li></ul></li></ul><h3 id="网络配置变量"><a href="#网络配置变量" class="headerlink" title="网络配置变量"></a>网络配置变量</h3><h4 id="OLLAMA-HOST"><a href="#OLLAMA-HOST" class="headerlink" title="OLLAMA_HOST"></a><code>OLLAMA_HOST</code></h4><ul><li><strong>作用</strong>: 指定 Ollama 服务监听的网络地址和端口。</li><li><strong>默认值</strong>: <code>127.0.0.1:11434</code> (仅监听本地回环地址)</li><li><strong>用途</strong>:<ul><li>允许其他设备访问 Ollama 服务 (例如设置为 <code>0.0.0.0:11434</code> 监听所有网络接口)。</li><li>更改监听端口以避免冲突。</li></ul></li><li><strong>示例</strong>:<ul><li>Linux&#x2F;macOS (bash&#x2F;zsh): <code>export OLLAMA_HOST=0.0.0.0:11434</code></li><li>Windows (CMD): <code>set OLLAMA_HOST=192.168.1.100:11434</code></li></ul></li></ul><h4 id="OLLAMA-ORIGINS"><a href="#OLLAMA-ORIGINS" class="headerlink" title="OLLAMA_ORIGINS"></a><code>OLLAMA_ORIGINS</code></h4><ul><li><strong>作用</strong>: 配置允许访问 Ollama API 的跨域来源 (CORS)。这对于从 Web 浏览器或其他不同域名的客户端访问 API至关重要。</li><li><strong>默认值</strong>: <code>http://localhost</code>, <code>http://localhost:*</code>, <code>http://127.0.0.1</code>, <code>http://127.0.0.1:*</code>, <code>app://*</code></li><li><strong>用途</strong>: 如果你的 Web 应用或其他客户端从不同的域名或端口访问 Ollama API，需要将这些来源添加到这里，使用逗号分隔多个值。可以使用 <code>*</code> 作为通配符。</li><li><strong>示例</strong>:<ul><li>Linux&#x2F;macOS (bash&#x2F;zsh): <code>export OLLAMA_ORIGINS=http://yourapp.com,http://localhost:8080,*</code></li></ul></li></ul><h3 id="性能与行为配置"><a href="#性能与行为配置" class="headerlink" title="性能与行为配置"></a>性能与行为配置</h3><ul><li><strong><code>OLLAMA_KEEP_ALIVE</code></strong>: 控制模型在没有收到请求后在内存中保持加载状态的时长。设置为 <code>-1</code> 表示永不卸载，<code>0</code> 表示立即卸载。适合内存&#x2F;显存充足且希望快速响应后续请求的场景。</li><li><strong><code>OLLAMA_MAX_LOADED_MODELS</code></strong>: 限制同时可以加载到内存&#x2F;显存中的模型数量。有助于管理资源消耗，防止内存溢出。</li><li><strong><code>OLLAMA_NUM_PARALLEL</code></strong>: 控制单个模型实例能并行处理多少个传入请求。增加此值可以提高吞吐量，但也会增加资源使用。</li><li><strong><code>OLLAMA_MAX_QUEUE</code></strong>: Ollama 服务器在返回“服务器繁忙”（503）错误之前可以排队的请求数量。</li><li><strong><code>OLLAMA_FLASH_ATTENTION</code></strong>: (实验性) 如果你的 GPU 支持 Flash Attention，启用此项 (<code>1</code>) 可以显著减少推理过程中的内存使用并可能提高速度。</li><li><strong><code>OLLAMA_KV_CACHE_TYPE</code></strong>: 设置 K&#x2F;V 缓存的量化类型（如 <code>q8_0</code>, <code>q4_0</code>），以牺牲少量精度为代价减少内存（主要是显存）占用。默认 <code>f16</code> (半精度浮点)。</li></ul><h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><ul><li><strong><code>OLLAMA_DEBUG</code></strong>: 设置为 <code>1</code> 会启用详细的调试日志输出，有助于排查问题。</li><li><strong><code>HTTPS_PROXY</code></strong>: 如果你需要通过 HTTPS 代理服务器下载模型，设置此变量。</li></ul><h3 id="相关的系统环境变量"><a href="#相关的系统环境变量" class="headerlink" title="相关的系统环境变量"></a>相关的系统环境变量</h3><p>Ollama 的行为也可能受到标准系统环境变量的影响：</p><ul><li><strong><code>HOME</code> &#x2F; <code>USERPROFILE</code></strong>: 定义用户的主目录。Ollama 使用它来确定默认的 <code>.ollama</code> 配置和模型存储目录。<strong>注意</strong>: 不建议通过修改 <code>HOME</code> 来改变 Ollama 路径，应优先使用 <code>OLLAMA_MODELS</code>。</li><li><strong><code>TMPDIR</code> &#x2F; <code>TEMP</code> &#x2F; <code>TMP</code></strong>: 指定操作系统用于存储临时文件的目录。Ollama 在模型下载或某些操作期间可能会使用。如果默认临时目录空间不足，修改此系统变量可能会有帮助。</li><li><strong><code>PATH</code></strong>: 定义系统查找可执行文件的目录列表。确保 <code>ollama</code> 命令本身能被系统找到（安装程序通常会处理）。</li><li><strong><code>LD_LIBRARY_PATH</code> (Linux) &#x2F; <code>DYLD_LIBRARY_PATH</code> (macOS)</strong>: 指定动态链接器查找共享库的额外路径。对于 GPU 加速，如果 CUDA 或 ROCm 库未在标准路径，可能需要设置此变量。</li></ul><hr><h2 id="如何设置环境变量"><a href="#如何设置环境变量" class="headerlink" title="如何设置环境变量"></a>如何设置环境变量</h2><p>环境变量的设置方式取决于你的操作系统和使用场景（临时或永久）。</p><h3 id="Linux-macOS"><a href="#Linux-macOS" class="headerlink" title="Linux &#x2F; macOS"></a>Linux &#x2F; macOS</h3><ul><li><p><strong>临时设置 (当前 Shell 会话有效)</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> OLLAMA_MODELS=/data/ollama_models</span><br><span class="line"><span class="built_in">export</span> OLLAMA_HOST=0.0.0.0:11434</span><br><span class="line"><span class="comment"># 启动 Ollama 服务或运行命令</span></span><br><span class="line">ollama serve &amp; </span><br><span class="line"><span class="comment"># 或者 ollama run modelname</span></span><br></pre></td></tr></table></figure></li><li><p><strong>永久设置 (用户级别)</strong>:<br>将 <code>export VAR_NAME=value</code> 添加到你的 Shell 配置文件中，例如：</p><ul><li>Bash: <code>~/.bashrc</code> 或 <code>~/.profile</code></li><li>Zsh: <code>~/.zshrc</code><br>然后运行 <code>source ~/.bashrc</code> (或相应文件) 或重新打开终端使设置生效。</li></ul></li><li><p><strong>永久设置 (Systemd 服务, 适用于 Linux)</strong>:<br>如果 Ollama 作为 systemd 服务运行，需要修改服务单元文件：</p><ol><li>运行 <code>sudo systemctl edit ollama.service</code></li><li>在打开的编辑器中添加以下内容（替换 <code>VAR_NAME</code> 和 <code>value</code>）：<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;VAR_NAME=value&quot;</span></span><br><span class="line"><span class="attr">Environment</span>=<span class="string">&quot;ANOTHER_VAR=another_value&quot;</span></span><br></pre></td></tr></table></figure></li><li>保存并关闭编辑器。</li><li>重新加载 systemd 配置并重启服务：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br><span class="line"><span class="built_in">sudo</span> systemctl restart ollama</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><ul><li><p><strong>临时设置 (当前命令提示符 CMD 会话)</strong>:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> OLLAMA_MODELS=D:\OllamaModels</span><br><span class="line"><span class="built_in">set</span> OLLAMA_HOST=<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>:<span class="number">11434</span></span><br><span class="line">ollama serve</span><br></pre></td></tr></table></figure></li><li><p><strong>临时设置 (当前 PowerShell 会话)</strong>:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$env:OLLAMA_MODELS</span> = <span class="string">&quot;D:\OllamaModels&quot;</span></span><br><span class="line"><span class="variable">$env:OLLAMA_HOST</span> = <span class="string">&quot;0.0.0.0:11434&quot;</span></span><br><span class="line">ollama serve</span><br></pre></td></tr></table></figure></li><li><p><strong>永久设置</strong>:</p><ol><li>在 Windows 搜索栏中搜索“环境变量”。</li><li>点击“编辑系统环境变量”。</li><li>在“系统属性”窗口的“高级”选项卡下，点击“环境变量…”按钮。</li><li>在“用户变量”或“系统变量”区域（推荐用户变量，除非需要对所有用户生效），点击“新建…”。</li><li>输入变量名 (例如 <code>OLLAMA_MODELS</code>) 和变量值 (例如 <code>D:\OllamaModels</code>)。</li><li>点击“确定”关闭所有窗口。</li><li><strong>重要</strong>: 需要<strong>重新启动</strong>任何已经打开的 CMD 或 PowerShell 窗口，以及 Ollama 服务（如果正在运行），才能使新的永久环境变量生效。对于图形界面的 Ollama 应用，可能需要重启应用甚至注销&#x2F;重新登录。</li></ol></li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>理解和使用 Ollama 的环境变量，特别是 <code>OLLAMA_MODELS</code> 用于指定模型存储位置，以及 <code>OLLAMA_HOST</code> 和 <code>OLLAMA_ORIGINS</code> 用于网络配置，是有效管理和部署 Ollama 的关键。根据你的具体需求调整这些设置可以优化性能、管理资源并集成到现有工作流中。</p>]]></content>
      
      
      <categories>
          
          <category> Ollama </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ollama </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>出现You are using a 64-bit WINEPREFIX时,创建32位WINEPREFIX 的指南以解决问题</title>
      <link href="/2025/03/07/17/"/>
      <url>/2025/03/07/17/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-Wine-的-WoW64-模式：创建-32-位-WINEPREFIX-的指南"><a href="#使用-Wine-的-WoW64-模式：创建-32-位-WINEPREFIX-的指南" class="headerlink" title="使用 Wine 的 WoW64 模式：创建 32 位 WINEPREFIX 的指南"></a>使用 Wine 的 WoW64 模式：创建 32 位 WINEPREFIX 的指南</h1><p>Wine 是一个兼容层，使类 Unix 操作系统能够运行 Windows 应用程序。WoW64（Windows-on-Windows 64-bit）是 Wine 的一个子系统，允许在 64 位环境中运行 32 位 Windows 应用程序。然而，WoW64 模式目前仍被视为实验性功能，可能会遇到兼容性问题。因此，建议在需要运行 32 位应用程序时，创建一个独立的 32 位 WINEPREFIX。</p><h1 id="什么是-WINEPREFIX？"><a href="#什么是-WINEPREFIX？" class="headerlink" title="什么是 WINEPREFIX？"></a>什么是 WINEPREFIX？</h1><p>WINEPREFIX 是一个环境变量，指定了 Wine 存储其配置文件和已安装 Windows 应用程序的目录。默认情况下，这个目录是 ~&#x2F;.wine。通过创建不同的 WINEPREFIX，用户可以为不同的应用程序设置独立的环境，以避免潜在的冲突。</p><h2 id="创建-32-位-WINEPREFIX-的步骤"><a href="#创建-32-位-WINEPREFIX-的步骤" class="headerlink" title="创建 32 位 WINEPREFIX 的步骤"></a>创建 32 位 WINEPREFIX 的步骤</h2><p>删除现有的 WINEPREFIX（如果存在）：</p><p>在终端中执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf ~/.wine</span><br></pre></td></tr></table></figure><p>注意： 这将删除当前 WINEPREFIX 中安装的所有 Windows 应用程序。请确保在执行此操作前备份重要数据。</p><p>设置环境变量并初始化新的 32 位 WINEPREFIX：</p><p>执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WINEARCH=win32 WINEPREFIX=~/.wine winecfg</span><br></pre></td></tr></table></figure><p>此命令将设置 WINEARCH 为 win32，并将 WINEPREFIX 指定为 ~&#x2F;.wine，然后运行 winecfg 初始化新的前缀。</p><p>注意： 在某些情况下，使用 WoW64 模式的 Wine 版本可能不支持创建 32 位 WINEPREFIX。如果遇到相关错误，请参考下文的解决方案。</p><h2 id="安装-Windows-应用程序："><a href="#安装-Windows-应用程序：" class="headerlink" title="安装 Windows 应用程序："></a>安装 Windows 应用程序：</h2><p>在新的 32 位 WINEPREFIX 中，您可以像往常一样安装和运行 32 位 Windows 应用程序。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WINEPREFIX=~/.wine wine setup.exe</span><br></pre></td></tr></table></figure><p>这将使用指定的 WINEPREFIX 运行安装程序。</p><p>处理 WoW64 模式的兼容性问题<br>由于 WoW64 模式仍处于实验阶段，可能会遇到以下问题：</p><p>无法创建 32 位 WINEPREFIX： 在 WoW64 模式下，尝试设置 WINEARCH&#x3D;win32 可能会导致错误。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kotlinwine: WINEARCH is <span class="built_in">set</span> to <span class="string">&#x27;win32&#x27;</span> but this is not supported <span class="keyword">in</span> wow64 mode.</span><br></pre></td></tr></table></figure><blockquote><p><strong>此时，建议使用传统的 32 位 Wine 版本，或在 64 位系统上安装支持多架构的 Wine 版本。</strong><br><strong>应用程序兼容性问题： 某些 32 位应用程序可能无法在 WoW64 模式下正常运行。如果遇到此类问题，建议在纯 32 位环境中测试应用程序。</strong></p></blockquote><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>虽然 WoW64 模式为在 64 位系统上运行 32 位应用程序提供了便利，但由于其仍处于实验阶段，可能存在兼容性问题。为确保最佳兼容性，建议在需要运行 32 位应用程序时，创建并使用独立的 32 位 WINEPREFIX。在尝试新的 Wine 功能时，请始终备份重要数据，并在报告问题时注明所使用的 Wine 模式和版本。<br>通过遵循上述指南，您可以在 Wine 环境中更有效地管理和运行 32 位 Windows 应用程序。</p>]]></content>
      
      
      <categories>
          
          <category> 解决方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArchLiunx </tag>
            
            <tag> Wine </tag>
            
            <tag> Bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>timeshift在ArchLiunx的使用(自动备份)</title>
      <link href="/2025/03/07/16/"/>
      <url>/2025/03/07/16/</url>
      
        <content type="html"><![CDATA[<h1 id="timeshift-systemd-timer"><a href="#timeshift-systemd-timer" class="headerlink" title="timeshift-systemd-timer"></a>timeshift-systemd-timer</h1><p>是一个利用 Systemd 定时器来自动执行 Timeshift 备份的工具。通过使用 Systemd 定时器，你可以在系统启动时或按照预定的时间间隔自动创建系统快照，无需手动干预。</p><p>功能概述<br>定时备份：使用 Systemd 定时器，Timeshift 可以在系统启动时或按照预定的时间间隔（如每小时、每天、每周）自动创建系统快照。</p><p>系统集成：通过 Systemd 管理，备份任务与系统服务紧密集成，提供更高的可靠性和可管理性。</p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><h2 id="1-安装-timeshift-systemd-timer"><a href="#1-安装-timeshift-systemd-timer" class="headerlink" title="1. 安装 timeshift-systemd-timer"></a>1. 安装 timeshift-systemd-timer</h2><p>在 Arch Linux 等发行版上，你可以通过 AUR（Arch User Repository）安装 timeshift-systemd-timer 包。</p><p>bash使用 AUR 助手（如 yay）安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S timeshift-systemd-timer</span><br></pre></td></tr></table></figure><p>安装完成后，timeshift-systemd-timer 会提供一组 Systemd 服务和定时器单元文件。</p><h2 id="2-启用所需的定时器"><a href="#2-启用所需的定时器" class="headerlink" title="2. 启用所需的定时器"></a>2. 启用所需的定时器</h2><blockquote><p>根据你的需求，选择合适的定时器进行启用。以下是可用的定时器选项：</p><p><code>timeshift-boot.timer</code>：在每次系统启动时创建快照。<br><code>timeshift-hourly.timer</code>：每小时创建一次快照。<br><code>timeshift-daily.timer</code>：每天创建一次快照。<br><code>timeshift-weekly.timer</code>：每周创建一次快照。<br><code>timeshift-monthly.timer</code>：每月创建一次快照。<br>你可以根据需要启用一个或多个定时器。例如，启用每日备份：</p></blockquote><h3 id="例子-启用并启动每日备份定时器"><a href="#例子-启用并启动每日备份定时器" class="headerlink" title="(例子)启用并启动每日备份定时器"></a><strong>(例子)启用并启动每日备份定时器</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now timeshift-daily.timer</span><br></pre></td></tr></table></figure><p>启用定时器后，Systemd 会根据定时器的设置自动触发 Timeshift 创建快照。</p><h1 id="重新加载-Systemd-配置"><a href="#重新加载-Systemd-配置" class="headerlink" title="重新加载 Systemd 配置"></a>重新加载 Systemd 配置</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl daemon-reload</span><br></pre></td></tr></table></figure><h2 id="3-验证定时器状态"><a href="#3-验证定时器状态" class="headerlink" title="3. 验证定时器状态"></a>3. 验证定时器状态</h2><p>要查看已启用的定时器及其下次触发时间，可以运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl list-timers | grep timeshift</span><br></pre></td></tr></table></figure><p>这将显示所有与 Timeshift 相关的定时器及其状态信息。</p><h2 id="4-手动触发备份"><a href="#4-手动触发备份" class="headerlink" title="4. 手动触发备份"></a>4. 手动触发备份</h2><p>如果你希望立即创建快照，可以手动触发备份服务：</p><h1 id="手动启动-Timeshift-备份服务"><a href="#手动启动-Timeshift-备份服务" class="headerlink" title="手动启动 Timeshift 备份服务"></a>手动启动 Timeshift 备份服务</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start timeshift.service</span><br></pre></td></tr></table></figure><p>这将立即执行备份操作。</p><ol start="5"><li>停用定时器<br>如果你不再需要某个定时器，可以将其禁用：</li></ol><h1 id="禁用每日备份定时器"><a href="#禁用每日备份定时器" class="headerlink" title="禁用每日备份定时器"></a>禁用每日备份定时器</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">disable</span> --now timeshift-daily.timer</span><br></pre></td></tr></table></figure><p>这将停止定时器并防止其在未来自动启动。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h2><p>配置备份频率：在 Timeshift 的设置中，你可以配置快照的频率和保留策略。确保定时器的设置与 Timeshift 的配置相匹配，以避免重复或遗漏备份。</p><p>系统资源：频繁创建快照可能占用大量磁盘空间。建议根据实际需求设置合理的备份频率，并定期检查和清理旧的快照。</p><p>通过使用 timeshift-systemd-timer，你可以实现自动化的系统备份，提高系统的可靠性和数据安全性。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArchLiunx </tag>
            
            <tag> timeshift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wine中文字体方块处理</title>
      <link href="/2025/03/07/15/"/>
      <url>/2025/03/07/15/</url>
      
        <content type="html"><![CDATA[<h1 id="Wine中文字体方块处理"><a href="#Wine中文字体方块处理" class="headerlink" title="Wine中文字体方块处理"></a>Wine中文字体方块处理</h1><h2 id="使用winetricks安装字体"><a href="#使用winetricks安装字体" class="headerlink" title="使用winetricks安装字体"></a>使用winetricks安装字体</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">winetricks fakechinese</span><br><span class="line">winetricks wenquanyi</span><br></pre></td></tr></table></figure><h2 id="更新注册表替换字体"><a href="#更新注册表替换字体" class="headerlink" title="更新注册表替换字体"></a>更新注册表替换字体</h2><p>wine regedit启动注册表,导入下面注册表内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">REGEDIT4</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\FontSubstitutes]</span><br><span class="line">&quot;Arial&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;Comic Sans MS&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;Courier&quot;=&quot;WenQuanYi Micro Hei Mono&quot;</span><br><span class="line">&quot;Courier New&quot;=&quot;WenQuanYi Micro Hei Mono&quot;</span><br><span class="line">&quot;Fixedsys&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;Helv&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;Helvetica&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;Lucida Console&quot;=&quot;WenQuanYi Micro Hei Mono&quot;</span><br><span class="line">&quot;Lucida Sans&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;Microsoft Sans Serif&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;MingLiU&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;PMingLiu&quot;=&quot;WenQuanYi Micro Hei Mono&quot;</span><br><span class="line">&quot;MS Shell Dlg&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;MS Shell Dlg 2&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;MS Dialog&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;MS Gothic&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;MS PGothic&quot;=&quot;WenQuanYi Micro Hei Mono&quot;</span><br><span class="line">&quot;MS UI Gothic&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;MS Mincho&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;MS PMincho&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;SimHei&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;SimSun&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;NSimSun&quot;=&quot;WenQuanYi Micro Hei Mono&quot;</span><br><span class="line">&quot;System&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;Tahoma&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;Times&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;Times New Roman&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;Tms Rmn&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;Trebuchet MS&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br><span class="line">&quot;Verdana&quot;=&quot;WenQuanYi Micro Hei&quot;</span><br></pre></td></tr></table></figure><h2 id="微信方块字体"><a href="#微信方块字体" class="headerlink" title="微信方块字体"></a>微信方块字体</h2><p>解决字体发虚问题，将<code>winecfg</code>-&gt;<code>Graphics</code>-&gt;<code>Screen resolution</code>设置为<code>120dpi</code>。</p><p>在wine命令前添加<code>LANG</code>环境变量打开应用程序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LANG=zh_CN.UTF-8 wine PATH_TO_WEIXIN_EXE</span><br></pre></td></tr></table></figure><p>参考自<a href="https://xixixia.gitlab.io/blog/manual/1_wine_cn.html">Wine中文字体方块处理</a></p>]]></content>
      
      
      <categories>
          
          <category> 解决方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArchLiunx </tag>
            
            <tag> Wine </tag>
            
            <tag> 中文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arch Liunx Use Chinese (Must install All)</title>
      <link href="/2025/03/05/14/"/>
      <url>/2025/03/05/14/</url>
      
        <content type="html"><![CDATA[<h1 id="Arch-Liunx-Use-Chinese-Must-install-All"><a href="#Arch-Liunx-Use-Chinese-Must-install-All" class="headerlink" title="Arch Liunx Use Chinese (Must install All)"></a>Arch Liunx Use Chinese (Must install All)</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yay -S adobe-source-han-sans-cn-fonts adobe-source-han-serif-cn-fonts noto-fonts-cjk wqy-microhei wqy-microhei-lite wqy-bitmapfont wqy-zenhei ttf-arphic-ukai ttf-arphic-uming</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ArchLiunx </tag>
            
            <tag> Chinese </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在新的Arch系统上安装yay</title>
      <link href="/2025/03/04/13/"/>
      <url>/2025/03/04/13/</url>
      
        <content type="html"><![CDATA[<h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><p>Arch Linux 中文社区仓库 是由 Arch Linux 中文社区驱动的非官方用户仓库。包含中文用户常用软件、工具、字体&#x2F;美化包等。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>完整的包信息列表（包名称&#x2F;架构&#x2F;维护者&#x2F;状态）请<a href="https://github.com/archlinuxcn/repo">点击这里</a>查看。</p><ul><li>官方仓库地址：<a href="https://repo.archlinuxcn.org/">https://repo.archlinuxcn.org</a></li></ul><p>使用方法：在 <code>/etc/pacman.conf</code> 文件末尾添加以下两行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">Server = https://mirrors.bfsu.edu.cn/archlinuxcn/<span class="variable">$arch</span></span><br></pre></td></tr></table></figure><p>之后通过以下命令安装 <code>archlinuxcn-keyring</code> 包导入 GPG key。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -Sy archlinuxcn-keyring</span><br></pre></td></tr></table></figure><h3 id="新系统中安装-archlinuxcn-keyring-包前的额外步骤"><a href="#新系统中安装-archlinuxcn-keyring-包前的额外步骤" class="headerlink" title="新系统中安装 archlinuxcn-keyring 包前的额外步骤"></a>新系统中安装 archlinuxcn-keyring 包前的额外步骤</h3><p>2023 年 12 月后，在新系统下安装 <code>archlinuxcn-keyring</code> 时可能会出现错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: archlinuxcn-keyring: Signature from <span class="string">&quot;Jiachen YANG (Arch Linux Packager Signing Key) &quot;</span> is marginal trust</span><br></pre></td></tr></table></figure><p>需要在本地信任 farseerfc 的 GPG key：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman-key --lsign-key <span class="string">&quot;farseerfc@archlinux.org&quot;</span></span><br></pre></td></tr></table></figure><p>然后重试安装。详情参见 <a href="https://www.archlinuxcn.org/archlinuxcn-keyring-manually-trust-farseerfc-key/">新系统中安装 archlinuxcn-keyring 包前需要手动信任 farseerfc 的 key</a></p><h3 id="上面的是北京外国语大学开源软件镜像站"><a href="#上面的是北京外国语大学开源软件镜像站" class="headerlink" title="上面的是北京外国语大学开源软件镜像站"></a><strong>上面的是北京外国语大学开源软件镜像站</strong></h3><hr><h3 id="下面是清华大学开源软件镜像站"><a href="#下面是清华大学开源软件镜像站" class="headerlink" title="下面是清华大学开源软件镜像站"></a><strong>下面是清华大学开源软件镜像站</strong></h3><p>使用方法：在 <code>/etc/pacman.conf</code> 文件末尾添加以下两行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/<span class="variable">$arch</span></span><br></pre></td></tr></table></figure><p>之后通过以下命令安装 <code>archlinuxcn-keyring</code> 包导入 GPG key。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -Sy archlinuxcn-keyring</span><br></pre></td></tr></table></figure><h3 id="新系统中安装-archlinuxcn-keyring-包前的额外步骤-1"><a href="#新系统中安装-archlinuxcn-keyring-包前的额外步骤-1" class="headerlink" title="新系统中安装 archlinuxcn-keyring 包前的额外步骤"></a>新系统中安装 archlinuxcn-keyring 包前的额外步骤</h3><p>2023 年 12 月后，在新系统下安装 <code>archlinuxcn-keyring</code> 时可能会出现错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: archlinuxcn-keyring: Signature from &quot;Jiachen YANG (Arch Linux Packager Signing Key) &quot; is marginal trust</span><br></pre></td></tr></table></figure><p>需要在本地信任 farseerfc 的 GPG key：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman-key --lsign-key &quot;farseerfc@archlinux.org&quot;</span><br></pre></td></tr></table></figure><p>然后重试安装。详情参见 <a href="https://www.archlinuxcn.org/archlinuxcn-keyring-manually-trust-farseerfc-key/">新系统中安装 archlinuxcn-keyring 包前需要手动信任 farseerfc 的 key</a>。</p><h3 id="任意选择一个镜像源之后"><a href="#任意选择一个镜像源之后" class="headerlink" title="任意选择一个镜像源之后"></a>任意选择一个镜像源之后</h3><hr><h2 id="使用Pacman安装yay"><a href="#使用Pacman安装yay" class="headerlink" title="使用Pacman安装yay"></a>使用Pacman安装yay</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S yay</span><br></pre></td></tr></table></figure><p>即可</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Liunx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> liunx </tag>
            
            <tag> pacman </tag>
            
            <tag> yay </tag>
            
            <tag> ArchLiunx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>archLinux安装fcitx输入法不能切换中文问题(已解决)</title>
      <link href="/2025/03/04/fcitx5/"/>
      <url>/2025/03/04/fcitx5/</url>
      
        <content type="html"><![CDATA[<h1 id="archLinux安装fcitx输入法不能切换中文问题-已解决"><a href="#archLinux安装fcitx输入法不能切换中文问题-已解决" class="headerlink" title="archLinux安装fcitx输入法不能切换中文问题(已解决)"></a>archLinux安装fcitx输入法不能切换中文问题(已解决)</h1><blockquote><p>很长的一段时间，都在使用debian系统，期间就一直听说Arch<a href="http://www.yangshengliang.com/kaiyuan-shijie/linux-shijie" title="linux">linux</a>如何如何地新，纯滚动更新，一次安装，永远不用重装系统。然而，arch安装比较折腾，好在有基于arch的衍生版—Manjaro,Manjaro(基于archLinux,所以，arch上的软件在manjaro都是可用的，因此，教程也适合所有的arch本身及衍生版)，系统安装方便简单，开箱即用，不需要过多的配置，于是就入手了。</p></blockquote><p>安装过程很简单，ctrl+alt+t 切换到终端，执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S fcitx fcitx-im</span><br></pre></td></tr></table></figure><p>安装fcitx后不能切换到中文输入法，搜索archwiki,查看：<a href="https://wiki.archlinuxcn.org/wiki/Fcitx?rdfrom=https://wiki.archlinux.org/index.php?title=Fcitx_(%25E7%25AE%2580%25E4%25BD%2593%25E4%25B8%25AD%25E6%2596%2587)&redirect=no">archfcitx配置</a></p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>vim打开<code>~/.xprofile</code>文件，添加以下代码：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#fcitx</span><br><span class="line">export GTK_IM_MODULE=fcitx </span><br><span class="line">export QT_IM_MODULE=fcitx </span><br><span class="line">export XMODIFIERS=&quot;@im=fcitx&quot;</span><br></pre></td></tr></table></figure><p>注销或重启系统，即可正常输入中文了，fcitx输入法有拼音和五笔。</p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>编辑 <strong>~&#x2F;.config&#x2F;plasma-workspace&#x2F;env&#x2F;input_method.sh</strong>（KDE 专用）</p><p>如果你使用的是 KDE Plasma 桌面，可以在 <strong>~&#x2F;.config&#x2F;plasma-workspace&#x2F;env&#x2F;</strong> 目录下创建或编辑 <strong>input_method.sh</strong>，内容如下：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">export GTK_IM_MODULE=fcitx</span><br><span class="line">export QT_IM_MODULE=fcitx</span><br><span class="line">export XMODIFIERS=@im=fcitx</span><br></pre></td></tr></table></figure><h3 id="Arch-Linux-KDE-Plasma-编辑-input-method-sh-文件遇到-E212-错误的解决方法"><a href="#Arch-Linux-KDE-Plasma-编辑-input-method-sh-文件遇到-E212-错误的解决方法" class="headerlink" title="Arch Linux KDE Plasma 编辑 input_method.sh 文件遇到 E212 错误的解决方法"></a>Arch Linux KDE Plasma 编辑 input_method.sh 文件遇到 E212 错误的解决方法</h3><h4 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h4><h5 id="检查目录是否存在"><a href="#检查目录是否存在" class="headerlink" title="检查目录是否存在"></a>检查目录是否存在</h5><p>运行以下命令检查目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -ld ~/.config/plasma-workspace/env/</span><br></pre></td></tr></table></figure><ul><li>如果输出显示 <strong>No such file or directory</strong>，需要创建目录。</li></ul><p>创建目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/.config/plasma-workspace/env </span><br></pre></td></tr></table></figure><h2 id="词库"><a href="#词库" class="headerlink" title="词库"></a><strong>词库</strong></h2><p>对于Fcitx5的中文输入法, 目前在仓库里提供了数个词库：</p><ul><li><a href="https://archlinux.org/packages/?name=fcitx5-pinyin-zhwiki">fcitx5-pinyin-zhwiki</a>包：felixonmars 根据中文维基百科创建的词库。适用于<strong>拼音输入法</strong></li><li><a href="https://aur.archlinux.org/packages/fcitx5-pinyin-sougou/">fcitx5-pinyin-sougou</a>AUR：适用于拼音输入法的搜狗词库</li><li><a href="https://archlinux.org/packages/?name=rime-pinyin-zhwiki">rime-pinyin-zhwiki</a>包：适用于 <a href="https://wiki.archlinuxcn.org/wiki/Rime" title="Rime">Rime</a>输入法的词库</li><li><a href="https://aur.archlinux.org/packages/rime-pinyin-moegirl/">rime-pinyin-moegirl</a>AUR：适用于 <a href="https://wiki.archlinuxcn.org/wiki/Rime" title="Rime">Rime</a>输入法的词库</li><li><a href="https://github.com/cathaysia/fcitx5_dicts/releases/tag/0.0.1">cedict</a>:从 <a href="https://www.mdbg.net/chinese/dictionary?page=cc-cedict">cedict辞典</a>导出的词库。</li><li><a href="https://aur.archlinux.org/packages/fcitx5-pinyin-moegirl/">fcitx5-pinyin-moegirl</a>AUR：根据萌娘百科创建的词库</li></ul><p><strong>注意：</strong>词典文件存在的目录为 ~&#x2F;.local&#x2F;share&#x2F;fcitx5&#x2F;pinyin&#x2F;dictionaries</p><ul><li><code>.dict</code>类型的词典文件可以直接手动移动到词典目录，使用搜狗细胞词库下载的<code>.scel</code>文件无法被<code>fcitx</code>识别</li><li>可在<code>fcitx5-configtool</code>中选在导入来自搜狗细胞词库文件，或使用<code>scel2org5</code>指令手动转换</li></ul><h2 id="配置工具"><a href="#配置工具" class="headerlink" title="配置工具"></a><strong>配置工具</strong></h2><p>fcitx5包的配置文件位于<code>~/.config/fcitx</code>，尽管您可以使用文本编辑器编辑配置文件，但是使用 GUI配置显然更方便。安装<a href="https://archlinux.org/packages/?name=fcitx5-configtool">fcitx5-configtool</a>软件包并运行<code>fcitx5-configtool</code>，或者从输入法托盘的菜单里选择“配置”。</p><p>KDE用户请安装<a href="https://archlinux.org/packages/?name=fcitx5-configtool">fcitx5-configtool包</a>后在KDE的“设置”程序里找到并设置。</p><h2 id="安装fcitx5"><a href="#安装fcitx5" class="headerlink" title="安装fcitx5"></a><strong>安装fcitx5</strong></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yay -S fcitx5-im &amp;&amp;</span><br><span class="line">yay -S fcitx5-chinese-addons 5.1.7-2 &amp;&amp; </span><br><span class="line">yay -S fcitx5-rime 5.1.10-1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> 解决办法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArchLiunx </tag>
            
            <tag> fcitx5 </tag>
            
            <tag> 输入法 </tag>
            
            <tag> Manjaro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在WSL的Ubuntu 中设置默认用户并解决常见问题</title>
      <link href="/2025/03/03/11/"/>
      <url>/2025/03/03/11/</url>
      
        <content type="html"><![CDATA[<h1 id="如何在-WSL-的-Ubuntu-中设置默认用户并解决常见问题"><a href="#如何在-WSL-的-Ubuntu-中设置默认用户并解决常见问题" class="headerlink" title="如何在 WSL 的 Ubuntu 中设置默认用户并解决常见问题"></a>如何在 WSL 的 Ubuntu 中设置默认用户并解决常见问题</h1><p>Windows Subsystem for Linux (WSL) 是一个强大的工具，允许在 Windows 上运行 Linux 发行版（如 Ubuntu）。在配置 Ubuntu 时，你可能希望将默认用户从 <strong>root</strong> 更改为自定义用户（例如 “ub”），并解决运行过程中遇到的常见问题，例如 <strong>sudo</strong> 权限缺失或主机名解析错误。本文将详细介绍设置默认用户的步骤，并提供针对典型错误的解决方案。</p><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ul><li>已安装 WSL 和 Ubuntu（可以通过 <strong>wsl –install -d Ubuntu</strong> 安装）。</li><li>在 Windows 中以 PowerShell 或命令提示符运行命令。</li><li>具备基本的终端操作知识。</li></ul><h2 id="设置默认用户为-“ub”"><a href="#设置默认用户为-“ub”" class="headerlink" title="设置默认用户为 “ub”"></a>设置默认用户为 “ub”</h2><p>假设你想将默认用户设置为 “ub”，以下是操作步骤：</p><h3 id="1-创建-“ub”-用户"><a href="#1-创建-“ub”-用户" class="headerlink" title="1. 创建 “ub” 用户"></a>1. 创建 “ub” 用户</h3><p>首次启动 Ubuntu 时，默认会要求创建一个用户。如果尚未创建 “ub”，可以手动添加：</p><ol><li><p>以 <strong>root</strong> 身份登录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl -u root.</span><br></pre></td></tr></table></figure></li><li><p>创建用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adduser ub</span><br></pre></td></tr></table></figure><p>按照提示输入密码和其他信息（可跳过非必填项）。</p></li><li><p>验证用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">id</span> ub</span><br></pre></td></tr></table></figure><p>输出应类似  uid&#x3D;1001(ub) gid&#x3D;1001(ub) groups&#x3D;1001(ub)。</p></li></ol><h3 id="2-设置默认用户"><a href="#2-设置默认用户" class="headerlink" title="2. 设置默认用户"></a>2. 设置默认用户</h3><p>在 Windows 中运行以下命令，将 “ub” 设置为默认用户：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntu config -default-user ub</span><br></pre></td></tr></table></figure><p>​<strong>注意</strong>​：如果你的 Ubuntu 发行版名称不同（例如 “Ubuntu-20.04”），用 <strong>wsl –list</strong> 检查后替换为正确名称，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntu2004 config -default-user ub</span><br></pre></td></tr></table></figure><h3 id="3-测试设置"><a href="#3-测试设置" class="headerlink" title="3. 测试设置"></a>3. 测试设置</h3><p>启动 WSL：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl</span><br></pre></td></tr></table></figure><p>如果成功，终端提示符应变为 <strong>ub@&lt;主机名&gt;:~$</strong>，表示已默认登录为 “ub”。</p><h2 id="常见问题及解决方法"><a href="#常见问题及解决方法" class="headerlink" title="常见问题及解决方法"></a>常见问题及解决方法</h2><p>在配置过程中，你可能会遇到以下问题，以下是解决方案。</p><h3 id="问题-1：getpwnam-ub-failed-0-错误"><a href="#问题-1：getpwnam-ub-failed-0-错误" class="headerlink" title="问题 1：getpwnam(ub) failed 0 错误"></a>问题 1：<strong>getpwnam(ub) failed 0</strong> 错误</h3><p>运行 <strong>wsl</strong> 时，如果出现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;3&gt;WSL (5 - Relay) ERROR: CreateProcessParseCommon:900: getpwnam(ub) failed 0</span><br></pre></td></tr></table></figure><p>这表示 “ub” 用户不存在。</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ul><li><p>检查用户是否存在：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/passwd | grep ub</span><br></pre></td></tr></table></figure></li><li><p>如果不存在，按步骤 1 创建 “ub” 用户，然后重新启动 WSL。</p></li></ul><h3 id="问题-2：ub-is-not-in-the-sudoers-file"><a href="#问题-2：ub-is-not-in-the-sudoers-file" class="headerlink" title="问题 2：ub is not in the sudoers file"></a>问题 2：<strong>ub is not in the sudoers file</strong></h3><p>以 “ub” 用户运行 <strong>sudo</strong> 命令时，出现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ub is not <span class="keyword">in</span> the sudoers file.</span><br></pre></td></tr></table></figure><p>这说明 “ub” 没有管理员权限。</p><h4 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h4><ol><li><p>以 <strong>root</strong> 身份登录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl -u root</span><br></pre></td></tr></table></figure></li><li><p>将 “ub” 添加到 <strong>sudo</strong> 组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -aG <span class="built_in">sudo</span> ub</span><br></pre></td></tr></table></figure></li><li><p>验证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">groups</span> ub</span><br></pre></td></tr></table></figure><p>输出应包含 “sudo”。</p></li><li><p>退出并重新以 “ub” 登录，测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">whoami</span></span><br></pre></td></tr></table></figure><p>输出应为 <strong>root</strong>。</p></li></ol><h3 id="问题-3：unable-to-resolve-host-警告"><a href="#问题-3：unable-to-resolve-host-警告" class="headerlink" title="问题 3：unable to resolve host 警告"></a>问题 3：<strong>unable to resolve host</strong> 警告</h3><p>运行 <strong>sudo</strong> 时，可能看到：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span>: unable to resolve host DESKTOP-UUI4AS5: Temporary failure <span class="keyword">in</span> name resolution</span><br></pre></td></tr></table></figure><p>这是 WSL 中常见的网络配置问题，通常不影响功能。</p><h4 id="解决方法（可选）"><a href="#解决方法（可选）" class="headerlink" title="解决方法（可选）"></a>解决方法（可选）</h4><ol><li><p>以 <strong>root</strong> 编辑 <strong>&#x2F;etc&#x2F;hosts</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/hosts</span><br></pre></td></tr></table></figure></li><li><p>添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1   DESKTOP-UUI4AS5</span><br></pre></td></tr></table></figure></li><li><p>保存并退出，警告应消失。</p></li></ol><h2 id="进阶配置：使用-wsl-conf"><a href="#进阶配置：使用-wsl-conf" class="headerlink" title="进阶配置：使用 wsl.conf"></a>进阶配置：使用 <strong>wsl.conf</strong></h2><p>如果命令行设置默认用户失败，可以通过 Ubuntu 的配置文件实现：</p><ol><li><p>以 <strong>root</strong> 编辑 <strong>&#x2F;etc&#x2F;wsl.conf</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/wsl.conf</span><br></pre></td></tr></table></figure></li><li><p>添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[user] &lt;span&gt;default=ub&lt;/span&gt;</span><br></pre></td></tr></table></figure></li><li><p>保存并重启 WSL：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl -terminate Ubuntu &lt;span&gt;wsl&lt;/span&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>​<strong>发行版名称</strong>​：始终用 <strong>wsl –list</strong> 确认你的 Ubuntu 实例名称，避免命令错误。</li><li>​<strong>权限</strong>​：确保在 Windows 和 Ubuntu 中有足够权限操作。</li><li>​<strong>重启</strong>​：某些更改（如 WSL 安装后）可能需要重启 Windows。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过 <strong>ubuntu config –default-user ub</strong> 可以轻松设置默认用户，而创建用户和赋予 <strong>sudo</strong> 权限是常见后续步骤。对于错误如 <strong>getpwnam</strong> 或 <strong>sudoers</strong>，只需检查用户状态并调整权限即可。主机名解析警告虽常见，但通常可忽略或通过简单配置解决。</p><p>希望这篇文章能帮助你在 WSL 的 Ubuntu 中顺利配置环境！如有疑问，欢迎留言讨论。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSL </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置 GitHub 访问：SSH、HTTPS 和 GitHub CLI</title>
      <link href="/2025/03/01/%E4%BD%BF%E7%94%A8%20SSH%20%E8%BF%9E%E6%8E%A5%E8%BF%9B%E8%A1%8C%20GitHub%20CLI%20(gh)%20%E7%99%BB%E5%BD%95%E6%95%99%E7%A8%8B/"/>
      <url>/2025/03/01/%E4%BD%BF%E7%94%A8%20SSH%20%E8%BF%9E%E6%8E%A5%E8%BF%9B%E8%A1%8C%20GitHub%20CLI%20(gh)%20%E7%99%BB%E5%BD%95%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="配置-GitHub-访问：SSH、HTTPS-和-GitHub-CLI"><a href="#配置-GitHub-访问：SSH、HTTPS-和-GitHub-CLI" class="headerlink" title="配置 GitHub 访问：SSH、HTTPS 和 GitHub CLI"></a>配置 GitHub 访问：SSH、HTTPS 和 GitHub CLI</h1><p>本文介绍如何通过 SSH 和 HTTPS 协议配置 GitHub 访问，并使用代理优化连接。此外，还介绍了 GitHub 官方的命令行工具 GitHub CLI 的安装和使用方法。本示例假定您已在本地 <code>127.0.0.1:10808</code> 部署了 SOCKS5 代理，并在 <code>127.0.0.1:1080</code> 部署了 HTTP 代理。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在开始之前，请确保完成以下准备：</p><ol><li><p><strong>​安装 Scoop(Windows 包管理器)</strong> ​：如果尚未安装，请按照 <a href="https://scoop.sh/">Scoop 安装指南</a> 进行设置。</p></li><li><p>​<strong>设置代理</strong>​：确保 SOCKS5 代理运行在 <code>127.0.0.1:10808</code>，HTTP 代理运行在 <code>127.0.0.1:1080</code>。</p></li><li><p>​<strong>注册 GitHub 账户</strong>​：在 <a href="https://github.com/">GitHub</a> 上创建账户。</p></li><li><p>​<strong>安装 Git</strong>​：使用 Scoop 安装 Git：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop install main/git</span><br></pre></td></tr></table></figure></li><li><p>​<strong>配置 Git 用户名和邮箱</strong>​：设置全局 Git 用户名和邮箱，用于标识您的提交：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;您的名字&quot;</span><br><span class="line">git config --global user.email &quot;您的邮箱@example.com&quot;</span><br></pre></td></tr></table></figure><p>验证配置是否正确：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name</span><br><span class="line">git config --global user.email</span><br></pre></td></tr></table></figure></li></ol><h2 id="通过-SSH-协议访问-GitHub"><a href="#通过-SSH-协议访问-GitHub" class="headerlink" title="通过 SSH 协议访问 GitHub"></a>通过 SSH 协议访问 GitHub</h2><p>SSH 协议通过代理配置可以绕过网络限制，适合需要安全连接的场景。以下是配置步骤：</p><h3 id="1-安装-nmap（包含-ncat）"><a href="#1-安装-nmap（包含-ncat）" class="headerlink" title="1. 安装 nmap（包含 ncat）"></a>1. 安装 nmap（包含 ncat）</h3><p>使用 Scoop 安装 <code>nmap</code>（包含 <code>ncat</code> 组件）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop install main/nmap</span><br></pre></td></tr></table></figure><h3 id="2-配置-SSH-代理"><a href="#2-配置-SSH-代理" class="headerlink" title="2. 配置 SSH 代理"></a>2. 配置 SSH 代理</h3><p>编辑或创建 <code>~/.ssh/config</code> 文件（Windows 路径通常为 <code>C:\Users\&lt;您的用户名&gt;\.ssh\config</code>），添加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Host ssh.github.com</span><br><span class="line">    User git</span><br><span class="line">    HostName ssh.github.com</span><br><span class="line">    Port 443</span><br><span class="line">    ProxyCommand ncat --verbose --proxy-type socks5 --proxy 127.0.0.1:10808 %h %p</span><br><span class="line"></span><br><span class="line">Host github.com</span><br><span class="line">    User git</span><br><span class="line">    HostName github.com</span><br><span class="line">    ProxyCommand ncat --verbose --proxy-type socks5 --proxy 127.0.0.1:10808 %h %p</span><br></pre></td></tr></table></figure><p>​<strong>说明</strong>​：</p><ul><li><code>ProxyCommand</code> 使用 <code>ncat</code> 通过 SOCKS5 代理连接 GitHub。</li><li><code>ssh.github.com</code> 使用 <code>Port 443</code> 可通过 HTTPS 端口绕过某些网络限制。</li><li>保存文件。在 Linux&#x2F;macOS 上，需确保文件权限正确，运行 <code>chmod 600 ~/.ssh/config</code>（Windows 可忽略）。</li></ul><h3 id="3-测试-SSH-连接"><a href="#3-测试-SSH-连接" class="headerlink" title="3. 测试 SSH 连接"></a>3. 测试 SSH 连接</h3><p>运行以下命令测试连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果配置正确，您将看到类似 <code>Hi &lt;您的用户名&gt;! You&#39;ve successfully authenticated...</code> 的消息。</p><p>​<strong>注意</strong>​：</p><ul><li>SSH 连接可能因代理或网络环境而较慢。</li></ul><h2 id="通过-HTTPS-协议访问-GitHub"><a href="#通过-HTTPS-协议访问-GitHub" class="headerlink" title="通过 HTTPS 协议访问 GitHub"></a>通过 HTTPS 协议访问 GitHub</h2><p>HTTPS 协议配置简单，适合快速设置。以下是配置步骤：</p><h3 id="1-设置-HTTP-代理"><a href="#1-设置-HTTP-代理" class="headerlink" title="1. 设置 HTTP 代理"></a>1. 设置 HTTP 代理</h3><p>运行以下命令配置 Git 的全局 HTTP 代理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy http://127.0.0.1:1080</span><br></pre></td></tr></table></figure><h3 id="2-验证-HTTPS-连接"><a href="#2-验证-HTTPS-连接" class="headerlink" title="2. 验证 HTTPS 连接"></a>2. 验证 HTTPS 连接</h3><p>尝试克隆一个仓库以测试连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/&lt;您的用户名&gt;/&lt;仓库名&gt;.git</span><br></pre></td></tr></table></figure><h3 id="3-关闭-HTTP-代理（可选）"><a href="#3-关闭-HTTP-代理（可选）" class="headerlink" title="3. 关闭 HTTP 代理（可选）"></a>3. 关闭 HTTP 代理（可选）</h3><p>如果不再需要代理，运行以下命令移除：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br></pre></td></tr></table></figure><p>​<strong>注意</strong>​：</p><ul><li>HTTPS 通常比 SSH 更快，但可能受限于网络环境。测试表明，HTTPS 在某些情况下性能优于 SSH。</li></ul><h2 id="使用-GitHub-CLI"><a href="#使用-GitHub-CLI" class="headerlink" title="使用 GitHub CLI"></a>使用 GitHub CLI</h2><p>GitHub CLI（<code>gh</code>）是 GitHub 官方提供的命令行工具，可简化仓库管理、拉取请求、问题跟踪等操作。</p><h3 id="1-安装-GitHub-CLI"><a href="#1-安装-GitHub-CLI" class="headerlink" title="1. 安装 GitHub CLI"></a>1. 安装 GitHub CLI</h3><p>使用 Scoop 安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop install main/gh</span><br></pre></td></tr></table></figure><h3 id="2-登录-GitHub-CLI"><a href="#2-登录-GitHub-CLI" class="headerlink" title="2. 登录 GitHub CLI"></a>2. 登录 GitHub CLI</h3><p>运行以下命令登录您的 GitHub 账户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gh auth login</span><br></pre></td></tr></table></figure><p>按照提示选择 HTTPS 或 SSH 协议，并通过浏览器或令牌完成认证。</p><h3 id="3-常用-GitHub-CLI-命令"><a href="#3-常用-GitHub-CLI-命令" class="headerlink" title="3. 常用 GitHub CLI 命令"></a>3. 常用 GitHub CLI 命令</h3><ul><li>克隆仓库：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gh repo clone &lt;您的用户名&gt;/&lt;仓库名&gt;</span><br></pre></td></tr></table></figure></li><li>创建拉取请求：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gh pr create</span><br></pre></td></tr></table></figure></li><li>查看问题列表：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gh issue list</span><br></pre></td></tr></table></figure></li></ul><p>更多功能请参考 <a href="https://cli.github.com/">GitHub CLI 官方文档</a>。</p><h2 id="性能对比与建议"><a href="#性能对比与建议" class="headerlink" title="性能对比与建议"></a>性能对比与建议</h2><ul><li>​<strong>SSH</strong>​：通过 <code>ssh.github.com:443</code> 和 SOCKS5 代理访问，适合需要高安全性的场景，但可能因代理或网络延迟较慢。</li><li>​<strong>HTTPS</strong>​：配置简单，速度通常优于 SSH，适合大多数开发场景。</li><li>​<strong>GitHub CLI</strong>​：结合 SSH 或 HTTPS，提供更高效的命令行工作流，推荐用于频繁操作 GitHub 仓库的用户。</li></ul><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p><strong>问：SSH 连接失败怎么办？</strong><br>答：检查 <code>~/.ssh/config</code> 配置是否正确，确认 SOCKS5 代理（<code>127.0.0.1:10808</code>）是否运行，并运行 <code>ssh -vT git@github.com</code> 查看详细错误日志。</p><p><strong>问：如何查看当前的 Git 代理设置？</strong><br>答：运行 <code>git config --global --get http.proxy</code> 查看 HTTP 代理配置。</p><p><strong>问：GitHub CLI 是否需要代理？</strong><br>答：是的，GitHub CLI 使用 HTTPS 协议，可通过 <code>http.proxy</code> 配置代理。</p><p>通过以上步骤，您可以灵活选择 SSH、HTTPS 或 GitHub CLI 访问 GitHub，优化您的开发工作流！</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSH </tag>
            
            <tag> Github </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Scoop 在 Windows 上安装和管理软件</title>
      <link href="/2025/03/01/%E4%BD%BF%E7%94%A8%20Scoop%20%E5%9C%A8%20Windows%20%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E7%AE%A1%E7%90%86%E8%BD%AF%E4%BB%B6/"/>
      <url>/2025/03/01/%E4%BD%BF%E7%94%A8%20Scoop%20%E5%9C%A8%20Windows%20%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E7%AE%A1%E7%90%86%E8%BD%AF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-Scoop-在-Windows-上安装和管理软件"><a href="#使用-Scoop-在-Windows-上安装和管理软件" class="headerlink" title="使用 Scoop 在 Windows 上安装和管理软件"></a>使用 Scoop 在 Windows 上安装和管理软件</h1><p>Scoop 是一个强大的 Windows 命令行安装工具，旨在简化应用程序的安装和管理。本文将介绍 Scoop 的安装步骤、一键添加所有已知 bucket、推荐的好用软件，以及解决常见安装问题的方法。</p><h2 id="当前日期：2025年6月20日"><a href="#当前日期：2025年6月20日" class="headerlink" title="当前日期：2025年6月20日"></a>当前日期：2025年6月20日</h2><h1 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h1><p>安装 Scoop 前需满足以下条件：</p><ol><li>PowerShell 版本：最新版 PowerShell 或 Windows PowerShell 5.1。</li><li>语言模式：需为 FullLanguage（检查：$ExecutionContext.SessionState.LanguageMode）。</li><li>执行策略：需为 RemoteSigned、Unrestricted 或 ByPass，设置示例：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser</span><br></pre></td></tr></table></figure><p>典型安装</p><p>默认安装到 C:\Users&lt;你的用户名&gt;\scoop：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">irm get.scoop.sh | iex</span><br></pre></td></tr></table></figure><p>代理支持（可选）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">irm get.scoop.sh -Proxy &#x27;http://&lt;ip:port&gt;&#x27; | iex</span><br></pre></td></tr></table></figure><p>验证：<code>scoop --version</code></p><h2 id="高级安装：自定义路径"><a href="#高级安装：自定义路径" class="headerlink" title="高级安装：自定义路径"></a>高级安装：自定义路径</h2><p>安装到任意盘符（如 F:\Scoop）：</p><ol><li>下载脚本：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">irm https://get.scoop.sh -outfile &#x27;install.ps1&#x27;</span><br></pre></td></tr></table></figure><ol start="2"><li>自定义安装：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\install.ps1 -ScoopDir &#x27;F:\Scoop&#x27;</span><br></pre></td></tr></table></figure><h2 id="一键添加所有已知-Bucket"><a href="#一键添加所有已知-Bucket" class="headerlink" title="一键添加所有已知 Bucket"></a>一键添加所有已知 Bucket</h2><p>Scoop 支持多个 bucket，提供丰富的应用选择。以下是已知 bucket 及一键添加命令：</p><blockquote><p>已知 Bucket<br>main：默认，常用非 GUI 应用。<br>extras：扩展应用。<br>versions：应用替代版本。<br>nirsoft：Nirsoft 工具集。<br>sysinternals：微软 Sysinternals 套件。<br>php：PHP 版本。<br>nerd-fonts：Nerd Fonts。<br>nonportable：非便携应用。<br>java：Java 开发套件。<br>games：开源&#x2F;免费游戏。</p></blockquote><p>一键添加命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop bucket add main; scoop bucket add extras; scoop bucket add versions; scoop bucket add nirsoft; scoop bucket add sysinternals; scoop bucket add php; scoop bucket add nerd-fonts; scoop bucket add nonportable; scoop bucket add java; scoop bucket add games</span><br></pre></td></tr></table></figure><p>验证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop bucket list</span><br></pre></td></tr></table></figure><h2 id="Scoop-上的好用软件"><a href="#Scoop-上的好用软件" class="headerlink" title="Scoop 上的好用软件"></a>Scoop 上的好用软件</h2><p>以下是 Scoop 上推荐的实用软件及其安装方法：</p><ol><li>7zip-zstd（增强压缩版）</li></ol><ul><li><p>特点：普通 7zip 不支持更高压缩算法，而 7zip-zstd 支持，但已停止维护。</p></li><li><p>安装：自动安装普通版 7zip 及修改版：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop install versions/7zip-zstd</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>Git（Scoop 必备）</li></ol><ul><li><p>用途：版本控制工具，Scoop 依赖 git 拉取 bucket 和更新。<br>安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop install main/git</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>镜像源配置（加速下载）</li></ol><ul><li><p>场景：网络受限时，可更换 Scoop 的 repo 地址为国内镜像。</p></li><li><p>步骤：</p></li><li><p>更换 repo 地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop config SCOOP_REPO &quot;https://gitee.com/scoop-installer/scoop&quot;</span><br></pre></td></tr></table></figure><p>更新 Scoop：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop update</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li>分支切换</li></ol><blockquote><p>分支说明：<br>master：代理分流，自动判断网络环境（基于原版 master）。<br>develop：代理分流（基于原版 develop）。<br>archive：原版，无修改（基于 master）。<br>默认分支：master。<br>切换分支（例如到 develop）：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scoop config scoop_branch develop</span><br><span class="line">scoop update</span><br></pre></td></tr></table></figure><h2 id="安装常用软件"><a href="#安装常用软件" class="headerlink" title="安装常用软件"></a>安装常用软件</h2><p>批量安装常用工具（默认最新版）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop install 7zip 7zip-zstd adb asset-ripper assetstudio bun cheat-engine cutter electerm everything-alpha fastcopy ffmpeg filezilla-server gh git gpg4win gsudo inno-setup innounp miniconda3 Motrix nmap nodejs-lts nsudo openssh potplayer ruffle-nightly rustup uv vim x64dbg youtubedownloader</span><br></pre></td></tr></table></figure><p>增强下载速度：使用 aria2</p><p>启用多线程下载：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scoop install aria2</span><br><span class="line">scoop config aria2-warning-enabled false  # 禁用警告</span><br></pre></td></tr></table></figure><p>更新软件<br>保持最新：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop update *</span><br></pre></td></tr></table></figure><h1 id="添加所有-bucket"><a href="#添加所有-bucket" class="headerlink" title="添加所有 bucket"></a>添加所有 bucket</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop bucket add main; scoop bucket add extras; scoop bucket add versions; scoop bucket add nirsoft; scoop bucket add sysinternals; scoop bucket add php; scoop bucket add nerd-fonts; scoop bucket add nonportable; scoop bucket add java; scoop bucket add games</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>Scoop 提供灵活的安装选项和丰富的软件资源。通过自定义路径、镜像源和分支切换，你可以优化使用体验。推荐的软件如 7zip-zstd 和 git 是提升效率的好帮手。如需更多帮助，请参考 Scoop 文档</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker和WSL2安装以及迁移教程</title>
      <link href="/2025/02/23/Docker%E7%94%A8%E6%B3%95/"/>
      <url>/2025/02/23/Docker%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker先决条件"><a href="#Docker先决条件" class="headerlink" title="Docker先决条件"></a>Docker先决条件</h2><ul><li>确保计算机运行的是 Windows 10（<a href="">已更新到版本 2004</a> 的内部版本 18362 或更高版本）或Windows 11。</li><li><a href="https://www.cnblogs.com/tianmingzh/articles/15861642.html">安装 WSL，并为在 WSL 2 中运行的 Linux 发行版设置用户名和密码</a>。</li><li>为了避免与在Docker Desktop上使用WSL 2发生任何潜在冲突，在安装Docker Desktop之前，必须卸载直接通过Linux发行版安装的任何早期版本的Docker Engine和CLI。</li></ul><h2 id="WSL2安装注意事项"><a href="#WSL2安装注意事项" class="headerlink" title="WSL2安装注意事项"></a><strong>WSL2安装注意事项</strong></h2><ul><li><p>如果 <strong>wsl –install</strong> 命令不起作用，可能是“虚拟机平台”没启用。去“控制面板 &gt; 程序 &gt; 启用或关闭 Windows 功能”，勾选“虚拟机平台”和“Windows 子系统支持 Linux”，然后重启。</p></li><li><p>硬件需要支持虚拟化（可以在 BIOS 中开启，比如 Intel VT-x 或 AMD-V）。</p></li><li><p>可使用以下命令一键开启所需功能,然后手动重新启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux, VirtualMachinePlatform -NoRestart</span><br></pre></td></tr></table></figure></li><li><p><strong>Microsoft-Windows-Subsystem-Linux</strong>：启用 WSL。</p></li><li><p><strong>VirtualMachinePlatform</strong>：启用 WSL2 所需的虚拟化支持。</p></li><li><p><strong>-NoRestart</strong>：避免立即重启（不过建议完成后手动重启）。</p></li></ul><h2 id="安装WSL2"><a href="#安装WSL2" class="headerlink" title="安装WSL2"></a>安装WSL2</h2><ol><li>在CMD或PowerShell输入:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --install</span><br></pre></td></tr></table></figure><ul><li>如果这是第一次安装 WSL，这个命令会自动启用 WSL 并安装默认的 Linux 发行版（通常是 Ubuntu）。完成后需要重启电脑。</li></ul><ol start="2"><li><p><strong>确保 WSL2 是默认版本</strong> 重启后，再次打开 PowerShell，输入：</p><p><code>wsl --set-default-version 2</code></p></li></ol><ul><li>这会将 WSL2 设置为默认版本，而不是 WSL1。</li></ul><ol start="3"><li><strong>安装 Linux 发行版</strong></li></ol><ul><li>打开 Microsoft Store，搜索你喜欢的 Linux 发行版，比如 Ubuntu、Debian 或 Kali。</li><li>点击“获取”并安装。安装完成后，启动它，会让你设置一个用户名和密码。</li></ul><ol start="4"><li><strong>检查安装是否成功</strong> 在 PowerShell 或命令行输入：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl -l -v</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>这会列出你安装的发行版和它们的版本。如果显示 “2”，说明 WSL2 运行正常。</p><p>5.<strong>更新 WSL</strong> 如果需要更新 WSL，输入:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --update</span><br></pre></td></tr></table></figure></li></ul><h2 id="安装WSL2成功之后-如何将WSL2迁移到任意盘符"><a href="#安装WSL2成功之后-如何将WSL2迁移到任意盘符" class="headerlink" title="安装WSL2成功之后,如何将WSL2迁移到任意盘符"></a>安装WSL2成功之后,如何将WSL2迁移到任意盘符</h2><p>WSL2 默认安装在 C 盘，我们可以通过以下步骤迁移安装位置</p><p>通过以下命令列出已安装的 Linux 发行版：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl -l -v</span><br></pre></td></tr></table></figure><p>如果运行状态为 Running，需先通过以下命令关闭：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --shutdown</span><br></pre></td></tr></table></figure><p>然后我们通过以下命令将 Ubuntu导出为 tar 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --export Ubuntu e:\Ubuntu.tar</span><br></pre></td></tr></table></figure><blockquote><p>注意：<br>wsl –export Distribution Name FileName<br>Distribution 为目标 Linux 发行版的名称，我安装的为： <code>Ubuntu</code></p><p>FileName 为导出的文件名，这里我导出到 <code>e:\Ubuntu.tar</code></p></blockquote><p>导出成功后，可以在导出的路径下看到导出的 tar 文件：<br>然后注销并卸载 Ubuntu</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --unregister Ubuntu</span><br></pre></td></tr></table></figure><p>再次查看已安装的 Linux 发行版：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl -l -v</span><br></pre></td></tr></table></figure><p>可以看到 Ubuntu已经注销并卸载了<br>然后将Ubuntu导入到新位置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --import Ubuntu E:\ubuntu E:\Ubuntu.tar</span><br></pre></td></tr></table></figure><blockquote><p>注意:<br>wsl –import Distribution Name InstallLocation FileName</p><p>Distribution Name 为目标 Linux 发行版的名称，我安装的为： <code>Ubuntu-22.04</code></p><p>InstallLocation 为要安装到的新位置，这里我安装到：<code>E:\ubuntu2204</code></p><p>FileName 为要导入的文件名，这里导入刚才导出的 <code>e:\Ubuntu-22.04.tar</code></p></blockquote><p>导入完成后，再次查看已安装的 Linux 发行版：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl -l -v</span><br></pre></td></tr></table></figure><p>可以看到 Ubuntu已成功导入到新的位置</p><p>最后需要更改一下默认用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ubuntu config --default-user lin</span><br></pre></td></tr></table></figure><blockquote><p>注：DistributionName config –default-user Username</p><p>Distribution Name 为目标 Linux 发行版的名称，我安装的为： <code>Ubuntu-22.04</code>，命令里要写为：<code>Ubuntu2204 </code></p><p>Username 为 WSL 发行版中存在的用户名，在设置 Linux 用户名和密码时我创建的用户为：<code>lin</code> ，所以命令里的 Username 这里就为：<code>lin</code></p></blockquote><p>以上步骤完成后，看到指定安装的新位置下有 <code>.vhdx</code> 文件说明迁移成功</p><h2 id="通过命令行安装-Docker-Desktop"><a href="#通过命令行安装-Docker-Desktop" class="headerlink" title="通过命令行安装 Docker Desktop"></a>通过命令行安装 Docker Desktop</h2><p>在 <code>Docker Desktop Installer.exe</code> 所在的目录下运行 Windows 命令提示符<br>在命令行中输入以下命令来进行 Docker Desktop 的安装：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">start</span> /w &quot;&quot; &quot;Docker Desktop Installer.exe&quot; install --installation-<span class="built_in">dir</span>=D:\Docker</span><br></pre></td></tr></table></figure><blockquote><p>注：Docker Desktop 默认安装位置为：<code>C:\Program Files\Docker\Docker</code><br>这里通过在 install 命令后添加 <code>--installation-dir=&lt;path&gt;</code> 参数来修改 Docker Desktop 的默认安装位置，其中 <code>&lt;path&gt;</code> 为指定的安装路径，这里我指定的安装位置为：<code>D:\Docker</code>。</p></blockquote><p>或PowerShell</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Start-Process</span> <span class="literal">-FilePath</span> <span class="string">&quot;Docker Desktop Installer.exe&quot;</span> <span class="literal">-ArgumentList</span> <span class="string">&quot;install --installation-dir=D:\Docker&quot;</span> <span class="literal">-Wait</span> <span class="literal">-NoNewWindow</span></span><br></pre></td></tr></table></figure><blockquote><ol><li>Start-Process<ul><li>PowerShell 中用于启动进程的命令，相当于 CMD 的 start。</li></ul></li><li>-FilePath “Docker Desktop Installer.exe”<ul><li>指定要运行的可执行文件，和 CMD 中的直接调用一致。</li></ul></li><li>-ArgumentList “install –installation-dir&#x3D;E:\develop\Docker”<ul><li>将参数传递给安装程序，等价于 CMD 中的 install –installation-dir&#x3D;E:\develop\Docker。</li></ul></li><li>-Wait<ul><li>对应 CMD 的 &#x2F;w，表示等待安装程序完成后再继续执行后续命令。</li></ul></li><li>-NoNewWindow<ul><li>避免在新窗口中运行，保持与 CMD 的行为一致（CMD 默认就在当前窗口运行）。</li></ul></li></ol></blockquote><p>借助 Docker Desktop for Windows 中支持的 WSL 2 后端，可以在基于 Linux 的开发环境中工作并生成基于 Linux 的容器，并在 Windows 上的 Microsoft Edge 浏览器中运行容器。</p><p>若要安装 Docker（在已<a href="https://www.cnblogs.com/tianmingzh/articles/15861642.html">安装 WSL</a> 之后）：</p><ol><li>按照通常的安装说明安装Docker Desktop。如果您正在运行受支持的系统，Docker Desktop会在安装期间提示您启用WSL 2(也有可能不提示，安装完成可以自己勾选)。读取屏幕上显示的信息，并启用WSL 2继续。</li><li>从Windows“开始”菜单启动Docker Desktop。</li><li>从Docker菜单中，选择<strong>Settings &gt; General</strong>。</li><li>选中<strong>Use the WSL 2 based engine</strong>复选框(如果在支持WSL 2的系统上安装了Docker Desktop，则默认情况下将启用此选项)。</li><li>单击<strong>Apply &amp; Restart</strong>。</li><li>Docker Desktop重新启动后，进入<strong>Settings</strong> &gt; <strong>Resources</strong> &gt; <strong>WSL Integration</strong>。<br>Docker WSL集成将在默认WSL发行版上启用。</li><li>单击<strong>Apply &amp; Restart。</strong></li></ol><h2 id="Docker-换源"><a href="#Docker-换源" class="headerlink" title="Docker 换源"></a>Docker 换源</h2><p>国内从 DockerHub 拉取镜像有时会遇到困难，此时可以配置镜像加速器。Docker 官方和国内很多云服务商都提供了国内加速器服务，这里以阿里云镜像为例，获取地址：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a>，进入后登录，左侧菜单选中镜像加速器就可以看到你的专属地址了：<br>然后复制到docker的设置中。<br>单击<strong>Apply &amp; Restart。</strong><br>在命令行执行 <strong>docker info</strong>，如果从结果中看到了如下内容，说明配置成功。</p><h2 id="Docker-Desktop-WSL2-修改镜像存储位置"><a href="#Docker-Desktop-WSL2-修改镜像存储位置" class="headerlink" title="Docker Desktop(WSL2)修改镜像存储位置"></a>Docker Desktop(WSL2)修改镜像存储位置</h2><p>Docker Desktop WSL2 默认会安装2个子系统，使用命令 <code>wsl -l -v --all&lt;span&gt; &lt;/span&gt;</code>查看。</p><p><em>docker-desktop</em>是存放程序的，<em>docker-desktop-data</em>是存放镜像的，这两个wsl子系统都是默认放在系统盘的。<br>如何转移？</p><p>退出Docker Desktop</p><p>关闭WSL</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="attr">--shutdown</span></span><br></pre></td></tr></table></figure><p>将子系统导出为tar文件</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">wsl</span> --<span class="meta">export</span> docker-desktop D:\docker-desktop\docker-desktop.tar</span><br><span class="line"><span class="symbol">wsl</span> --<span class="meta">export</span> docker-desktop-<span class="meta">data</span> D:\docker-desktop\docker-desktop-<span class="meta">data</span>.tar</span><br></pre></td></tr></table></figure><p>注销子系统</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="attr">--unregister</span> docker-desktop</span><br><span class="line">wsl <span class="attr">--unregister</span> docker-desktop-data</span><br></pre></td></tr></table></figure><p>使用新路径导入子系统</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wsl --<span class="keyword">import</span> docker-desktop D:\docker-desktop\distro D:\docker-desktop\docker-desktop.tar --version <span class="number">2</span></span><br><span class="line">wsl --<span class="keyword">import</span> docker-desktop-<span class="keyword">data</span> D:\docker-desktop\<span class="keyword">data</span> D:\docker-desktop\docker-desktop-<span class="keyword">data</span>.tar --version <span class="number">2</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> WSL2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scoop使用说明</title>
      <link href="/2025/02/03/Scoop%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
      <url>/2025/02/03/Scoop%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h1 id="Scoop上的好用的软件"><a href="#Scoop上的好用的软件" class="headerlink" title="Scoop上的好用的软件"></a>Scoop上的好用的软件</h1><h3 id="1-正常的7zip不支持更高的压缩算法-而下面支持-只不过已经不再维护了"><a href="#1-正常的7zip不支持更高的压缩算法-而下面支持-只不过已经不再维护了" class="headerlink" title="1. 正常的7zip不支持更高的压缩算法,而下面支持,只不过已经不再维护了"></a>1. 正常的7zip不支持更高的压缩算法,而下面支持,只不过已经不再维护了</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop install versions/7zip-zstd</span><br></pre></td></tr></table></figure><p>自动安装7zip普通版以及修改版</p><h3 id="2-我们使用Scoop必须的git"><a href="#2-我们使用Scoop必须的git" class="headerlink" title="2. 我们使用Scoop必须的git"></a>2. 我们使用Scoop必须的git</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop install main/git</span><br></pre></td></tr></table></figure><h3 id="3-我们使用Scoop肯定非常多需要下载代理的话可以添加镜像源"><a href="#3-我们使用Scoop肯定非常多需要下载代理的话可以添加镜像源" class="headerlink" title="3. 我们使用Scoop肯定非常多需要下载代理的话可以添加镜像源"></a>3. 我们使用Scoop肯定非常多需要下载代理的话可以添加镜像源</h3><p>按以下步骤进行：</p><ul><li>更换scoop的repo地址</li><li>拉取新库地址</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scoop config SCOOP_REPO &quot;https://gitee.com/scoop-installer/scoop&quot;</span><br><span class="line">scoop update</span><br></pre></td></tr></table></figure><h3 id="4-可切换scoop分支"><a href="#4-可切换scoop分支" class="headerlink" title="4. 可切换scoop分支"></a>4. 可切换scoop分支</h3><p>本库包含如下分支。</p><table><thead><tr><th>分支</th><th>含义</th><th>基于原版分支</th></tr></thead><tbody><tr><td>master</td><td>代理分流,根据电脑网络环境自动判断</td><td>master</td></tr><tr><td>develop</td><td>代理分流，同上</td><td>develop</td></tr><tr><td>archive</td><td>原版，无任何修改</td><td>master</td></tr></tbody></table><p>安装默认选择 <code>master</code>分支，想要切换到其他分支，可执行如下命令</p><ul><li>切换分支到develop</li><li>重新拉取git</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scoop config scoop_branch develop</span><br><span class="line">scoop update</span><br></pre></td></tr></table></figure><h3 id="5-添加bucket"><a href="#5-添加bucket" class="headerlink" title="5. 添加bucket"></a>5. 添加bucket</h3><p>我们之前已经安装了git直接开始添加bucket</p><ul><li>查询已知bucket</li><li>添加bucket</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scoop bucket known</span><br><span class="line">scoop bucket add extras</span><br></pre></td></tr></table></figure><h3 id="6-添加代理选项-可选"><a href="#6-添加代理选项-可选" class="headerlink" title="6.添加代理选项(可选)"></a>6.添加代理选项(可选)</h3><ul><li>添加代理 根据实际填写http代理</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop config proxy 127.0.0.1:4412</span><br></pre></td></tr></table></figure><ul><li>删除代理</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop config rm proxy</span><br></pre></td></tr></table></figure><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="问题1：Scoop-is-running-the-installer-as-administrator-is-disabled"><a href="#问题1：Scoop-is-running-the-installer-as-administrator-is-disabled" class="headerlink" title="问题1：Scoop is running the installer as administrator is disabled."></a>问题1：<strong>Scoop is running the installer as administrator is disabled.</strong></h4><p>原因：scoop禁止在管理员权限下安装</p><p>解决办法：开始菜单右键，选择 <code>Windows PowerShell</code>，然后重新执行安装命令</p><h4 id="问题2：无法正确下载软件资源，导致软件安装失败"><a href="#问题2：无法正确下载软件资源，导致软件安装失败" class="headerlink" title="问题2：无法正确下载软件资源，导致软件安装失败"></a>问题2：<strong>无法正确下载软件资源，导致软件安装失败</strong></h4><p>原因：存在多重套娃代理，例如（https:&#x2F;&#x2F;&lt;代理A&gt;&#x2F;https:&#x2F;&#x2F;&lt;代理B&gt;&#x2F;&lt;资源链接&gt;），尤其是国内镜像bucket或者针对中国优化的bucket库，其中json资源多数已硬编码了代理链接。 以scoop-proxy-cn为例，git资源的下载链接为：<a href="https://gitee.com/link?target=https://mirror.ghproxy.com/https://github.com/git-for-windows/git/releases/download/v2.45.0.windows.1/PortableGit-2.45.0-64-bit.7z.exe%23/dl.7z">https://mirror.ghproxy.com/https://github.com/git-for-windows/git/releases/download/v2.45.0.windows.1/PortableGit-2.45.0-64-bit.7z.exe#/dl.7z</a>，其已经存在了 <code>代理B</code>，由于此类链接的IP多为外网IP，默认走程序代理，也即出现上面的代理套娃，跨域失败，资源拉取失败，软件安装失败。</p><p>解决办法（3种方法可选）：</p><ol><li>执行 <code>scoop update</code>将程序更新至最新版本，然后再执行下载（推荐）；</li><li>放弃优化软件库，使用本页面推荐的几个bucket；</li><li>切换至 <code>archieve</code>分支，放弃本镜像的代理优化。</li></ol><h4 id="问题3：远程主机强迫关闭了一个现有的连接"><a href="#问题3：远程主机强迫关闭了一个现有的连接" class="headerlink" title="问题3：远程主机强迫关闭了一个现有的连接"></a>问题3：<strong>远程主机强迫关闭了一个现有的连接</strong></h4><p>原因：重复多次请求同一个资源，后端关闭了此链接。</p><p>解决办法：关闭aria2</p><h4 id="可按照下表内容进行添加bucket"><a href="#可按照下表内容进行添加bucket" class="headerlink" title="可按照下表内容进行添加bucket"></a>可按照下表内容进行添加bucket</h4><table><thead><tr><th>名称</th><th>说明</th><th>使用方法</th></tr></thead><tbody><tr><td><a href="https://gitee.com/link?target=https://github.com/ScoopInstaller/Main">main</a></td><td>内置库</td><td><code>scoop bucket add main https://gitee.com/scoop-installer/Main</code></td></tr><tr><td><a href="https://gitee.com/link?target=https://github.com/ScoopInstaller/Extras">extras</a></td><td>内置库</td><td><code>scoop bucket add extras https://gitee.com/scoop-installer/Extras</code></td></tr><tr><td><a href="https://gitee.com/link?target=https://github.com/ScoopInstaller/Versions">versions</a></td><td>内置库</td><td><code>scoop bucket add versions https://gitee.com/scoop-installer/Versions</code></td></tr><tr><td><a href="https://gitee.com/link?target=https://github.com/ScoopInstaller/Nirsoft">Nirsoft</a></td><td>内置库</td><td><code>scoop bucket add nirsoft https://gitee.com/scoop-installer/Nirsoft</code></td></tr><tr><td><a href="https://gitee.com/link?target=https://github.com/niheaven/scoop-sysinternals">sysinternals</a></td><td>内置库</td><td><code>scoop bucket add sysinternals https://gitee.com/scoop-installer/scoop-sysinternals</code></td></tr><tr><td><a href="https://gitee.com/link?target=https://github.com/ScoopInstaller/PHP">php</a></td><td>内置库</td><td><code>scoop bucket add php https://gitee.com/scoop-installer/PHP</code></td></tr><tr><td><a href="https://gitee.com/link?target=https://github.com/matthewjberger/scoop-nerd-fonts">nerd-fonts</a></td><td>内置库</td><td><code>scoop bucket add nerd-fonts https://gitee.com/scoop-installer/scoop-nerd-fonts</code></td></tr><tr><td><a href="https://gitee.com/link?target=https://github.com/ScoopInstaller/Nonportable">nonportable</a></td><td>内置库</td><td><code>scoop bucket add nonportable https://gitee.com/scoop-installer/Nonportable</code></td></tr><tr><td><a href="https://gitee.com/link?target=https://github.com/ScoopInstaller/Java">java</a></td><td>内置库</td><td><code>scoop bucket add java https://gitee.com/scoop-installer/Java</code></td></tr><tr><td><a href="https://gitee.com/link?target=https://github.com/Calinou/scoop-games">games</a></td><td>内置库</td><td><code>scoop bucket add games https://gitee.com/scoop-installer/scoop-games</code></td></tr></tbody></table><h4 id="其他优秀的镜像库"><a href="#其他优秀的镜像库" class="headerlink" title="其他优秀的镜像库"></a>其他优秀的镜像库</h4><p>优先推荐表格中靠前的仓库，国内常用软件均能在里面找到。</p><table><thead><tr><th>名称</th><th>代表软件</th><th>使用方法</th></tr></thead><tbody><tr><td><a href="https://gitee.com/link?target=https://github.com/chawyehsu/dorado.git">dorado</a></td><td>chfs cosbrowser qqmusic runany neteasemusic texlive</td><td><code>scoop bucket add dorado https://gitee.com/scoop-installer/dorado</code></td></tr><tr><td><a href="https://gitee.com/link?target=https://github.com/ivaquero/scoopet">scoopet</a></td><td>科研工具 feishu yuque wpsoffice-cn</td><td><code>scoop bucket add scoopet https://gitee.com/scoop-installer/scoopet</code></td></tr><tr><td><a href="https://gitee.com/link?target=https://github.com/scoopcn/scoopcn">scoopcn</a></td><td>kugou sunlogin tim todesk wps ynote</td><td><code>scoop bucket add scoopcn https://gitee.com/scoop-installer/scoopcn</code></td></tr><tr><td><a href="https://gitee.com/link?target=https://github.com/kkzzhizhou/scoop-zapps">scoop-zapps</a></td><td>manictime qq SogouPinyin-Portable TianRuoOCR wps zerotier</td><td><code>scoop bucket add scoop-zapps https://gitee.com/scoop-installer/scoop-zapps</code></td></tr><tr><td><a href="https://gitee.com/link?target=https://github.com/echoiron/echo-scoop">echo</a></td><td>ecloud emeditor oss-browser qqlive xiuxiu</td><td><code>scoop bucket add echo https://gitee.com/scoop-installer/echo-scoop</code></td></tr><tr><td><a href="https://gitee.com/link?target=https://github.com/akirco/aki-apps.git">aki</a></td><td>pure-live wegame format-factory BaiduNetdisk shimo</td><td><code>scoop bucket add aki https://gitee.com/scoop-installer/aki-apps</code></td></tr><tr><td><a href="https://gitee.com/link?target=https://github.com/amorphobia/siku">siku</a></td><td>adrive bbdown bilibili-desktop pinxin</td><td><code>scoop bucket add siku https://gitee.com/scoop-installer/siku</code></td></tr><tr><td><a href="https://gitee.com/link?target=https://github.com/hoilc/scoop-lemon">lemon</a></td><td>douyin sing-boxstream-music</td><td><code>scoop bucket add lemon https://gitee.com/scoop-installer/scoop-lemon</code></td></tr><tr><td><a href="https://gitee.com/link?target=https://github.com/Paxxs/Cluttered-bucket">cluttered</a></td><td>rdp_warper hashtab fastcopy</td><td><code>scoop bucket add cluttered https://gitee.com/scoop-installer/Cluttered-bucket</code></td></tr><tr><td><a href="https://gitee.com/link?target=https://github.com/ZvonimirSun/scoop-iszy">iszy</a></td><td>lx-music qq-dreamcast wechat</td><td><code>scoop bucket add iszy https://gitee.com/scoop-installer/scoop-iszy</code></td></tr><tr><td><a href="https://gitee.com/link?target=https://github.com/zhoujin7/tomato">tomato</a></td><td>quicker notepad–</td><td><code>scoop bucket add tomato https://gitee.com/scoop-installer/tomato</code></td></tr><tr><td><a href="https://gitee.com/link?target=https://github.com/hu3rror/scoop-muggle.git">scoop-muggle</a></td><td>docbox logseq</td><td><code>scoop bucket add muggle https://gitee.com/scoop-installer/scoop-muggle</code></td></tr><tr><td><a href="https://gitee.com/link?target=https://github.com/lzwme/scoop-proxy-cn">scoop-proxy-cn</a></td><td>融合怪（加速链接内置于json文件内，可能存在失效问题)</td><td><code>scoop bucket add spc https://gitee.com/xuchaoxin1375/spc</code></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Scoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Scoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode加载web 视图，报错:“Error: Could not register serviceworkers: InvalidstateError: Failed to regist“</title>
      <link href="/2025/01/29/vscode%E5%8A%A0%E8%BD%BDweb%E8%A7%86%E5%9B%BE%E6%8A%A5%E9%94%99/"/>
      <url>/2025/01/29/vscode%E5%8A%A0%E8%BD%BDweb%E8%A7%86%E5%9B%BE%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h1 id="vscode加载web-视图，报错-“Error-Could-not-register-serviceworkers-InvalidstateError-Failed-to-regist“"><a href="#vscode加载web-视图，报错-“Error-Could-not-register-serviceworkers-InvalidstateError-Failed-to-regist“" class="headerlink" title="vscode加载web 视图，报错:“Error: Could not register serviceworkers: InvalidstateError: Failed to regist“"></a>vscode加载web 视图，报错:“Error: Could not register serviceworkers: InvalidstateError: Failed to regist“</h1><h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><ol><li><p>关闭<strong>vscode</strong></p></li><li><p>按WIN + R，输入cmd，打开终端，然后输入命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code --no-sandbox</span><br></pre></td></tr></table></figure></li><li><p>重启vscode，就可以正常使用了。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 错误 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub 项目回退到之前的某个版本</title>
      <link href="/2025/01/26/GitHub%20%E9%A1%B9%E7%9B%AE%E5%9B%9E%E9%80%80%E5%88%B0%E4%B9%8B%E5%89%8D%E7%9A%84%E6%9F%90%E4%B8%AA%E7%89%88%E6%9C%AC/"/>
      <url>/2025/01/26/GitHub%20%E9%A1%B9%E7%9B%AE%E5%9B%9E%E9%80%80%E5%88%B0%E4%B9%8B%E5%89%8D%E7%9A%84%E6%9F%90%E4%B8%AA%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p>在GitHub上回退到之前的某个版本，可以通过以下步骤来实现：</p><ol><li><p><strong>找到 commit ID：</strong> 打开你的项目仓库页面，点击 “Commits”（在代码页面的上方导航栏中），找到你要回退到的版本。每个提交都有一个唯一的 commit ID（一长串的哈希值），复制你想要回退的版本的 commit ID。</p></li><li><p><strong>在本地仓库执行回退操作：</strong> 打开命令行终端，进入你的本地项目目录，然后运行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard &lt;commit_ID&gt;</span><br></pre></td></tr></table></figure><p>将 <code>commit_ID</code> 替换为你复制的实际 commit ID。</p></li><li><p><strong>强制推送到远程仓库：</strong> 因为你已经修改了本地仓库的历史记录，你需要使用强制推送将这些更改同步到远程仓库。运行以下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master --force</span><br></pre></td></tr></table></figure></li></ol><p>如果你在其他分支上工作，将 <code>master</code> 替换为你当前的分支名。</p><p>请注意：</p><ul><li><strong>谨慎使用强制推送：</strong> 强制推送将覆盖远程仓库中的历史记录，可能会导致其他协作者的问题。确保你和团队都了解你要执行的操作，并协调好。</li><li><strong>备份重要更改：</strong> 在执行回退之前，建议创建一个新的分支或备份当前分支，以便稍后可以轻松地回到之前的状态。</li><li><strong>注意历史记录：</strong> Git 的历史记录是项目的重要组成部分，谨慎处理历史记录的更改，以避免潜在的问题。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>论有哪些高压缩的软件</title>
      <link href="/2025/01/06/%E8%AE%BA%E6%9C%89%E5%93%AA%E4%BA%9B%E9%AB%98%E5%8E%8B%E7%BC%A9%E7%9A%84%E8%BD%AF%E4%BB%B6/"/>
      <url>/2025/01/06/%E8%AE%BA%E6%9C%89%E5%93%AA%E4%BA%9B%E9%AB%98%E5%8E%8B%E7%BC%A9%E7%9A%84%E8%BD%AF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="论有哪些高压缩的软件"><a href="#论有哪些高压缩的软件" class="headerlink" title="论有哪些高压缩的软件"></a>论有哪些高压缩的软件</h2><ol><li><p>Zstandard<br><a href="%5Bhttps://%5D(https://facebook.github.io/zstd/)">Zstandard</a><br><img src="/../imges/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202025-01-06%20205609.png" alt="alt text"></p></li><li><p>Brotli<br><a href="%5Bhttps://%5D(https://github.com/google/brotli)">Brotli</a><br><img src="/../imges/image.png" alt="alt text"></p></li></ol><h3 id="如果你需要-高压缩率-和-速度均衡，推荐-Zstandard-zstd-或-Brotli。"><a href="#如果你需要-高压缩率-和-速度均衡，推荐-Zstandard-zstd-或-Brotli。" class="headerlink" title="如果你需要 高压缩率 和 速度均衡，推荐 Zstandard (zstd) 或 Brotli。"></a>如果你需要 高压缩率 和 速度均衡，推荐 Zstandard (zstd) 或 Brotli。</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>论如何安装谷歌三件套</title>
      <link href="/2025/01/06/%E8%AE%BA%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E8%B0%B7%E6%AD%8C%E4%B8%89%E4%BB%B6%E5%A5%97/"/>
      <url>/2025/01/06/%E8%AE%BA%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85%E8%B0%B7%E6%AD%8C%E4%B8%89%E4%BB%B6%E5%A5%97/</url>
      
        <content type="html"><![CDATA[<h1 id="安卓系统安装谷歌三件套"><a href="#安卓系统安装谷歌三件套" class="headerlink" title="安卓系统安装谷歌三件套"></a>安卓系统安装谷歌三件套</h1><ul><li>Google 服务框架</li><li>Google play service</li><li>Google play store</li></ul><h3 id="首先尝试直接使用谷歌安装器安装"><a href="#首先尝试直接使用谷歌安装器安装" class="headerlink" title="首先尝试直接使用谷歌安装器安装"></a>首先尝试直接使用谷歌安装器安装</h3><ul><li><a href="https://www.pgyer.com/pOEI">GO谷歌安装器</a></li><li><a href="https://www.wandoujia.com/apps/7971105">SU谷歌安装器</a></li><li><a href="https://www.wandoujia.com/apps/8124836">HIGO谷歌安装器(支持部分华为)</a></li><li><a href="https://www.wandoujia.com/apps/7661165">OurPlay(原谷歌空间)</a></li><li><a href="https://github.com/sky22333/Google-Play-Store/releases">备用下载链接</a></li></ul><hr><blockquote><p>[!TIP]<br>下列方法需要科学上网的支持</p></blockquote><h2 id="1：安装Google服务框架"><a href="#1：安装Google服务框架" class="headerlink" title="1：安装Google服务框架"></a>1：安装Google服务框架</h2><p><a href="https://www.apkmirror.com/apk/google-inc/google-services-framework/">Google服务框架下载地址</a></p><h3 id="🔔注意一定要选择你的安卓系统版本的服务框架，根据文件名字来找，下载apk版本。"><a href="#🔔注意一定要选择你的安卓系统版本的服务框架，根据文件名字来找，下载apk版本。" class="headerlink" title="🔔注意一定要选择你的安卓系统版本的服务框架，根据文件名字来找，下载apk版本。"></a>🔔注意一定要选择你的安卓系统版本的服务框架，根据文件名字来找，下载apk版本。</h3><h2 id="2：安装Google-play-service"><a href="#2：安装Google-play-service" class="headerlink" title="2：安装Google play service"></a>2：安装Google play service</h2><p><a href="https://www.apkmirror.com/apk/google-inc/google-play-services/">Google play service下载地址</a></p><h3 id="🔔注意一定要选择你的系统版本的下载，DPI也需要符合，点进去后下载最新版本，下载apk版本。"><a href="#🔔注意一定要选择你的系统版本的下载，DPI也需要符合，点进去后下载最新版本，下载apk版本。" class="headerlink" title="🔔注意一定要选择你的系统版本的下载，DPI也需要符合，点进去后下载最新版本，下载apk版本。"></a>🔔注意一定要选择你的系统版本的下载，DPI也需要符合，点进去后下载最新版本，下载apk版本。</h3><hr><h2 id="3：安装Google-play-store"><a href="#3：安装Google-play-store" class="headerlink" title="3：安装Google play store"></a>3：安装Google play store</h2><p><a href="https://www.apkmirror.com/apk/google-inc/google-play-store/">Google play store下载地址</a></p><h3 id="🔔All-Versions里面选择第一个最新版本就可以了，下载apk版本。"><a href="#🔔All-Versions里面选择第一个最新版本就可以了，下载apk版本。" class="headerlink" title="🔔All Versions里面选择第一个最新版本就可以了，下载apk版本。"></a>🔔All Versions里面选择第一个最新版本就可以了，下载apk版本。</h3><p>所有的方法都不行的话还可以尝试备用方案<a href="https://gboxlab.com/">GBox虚拟空间</a> 支持华为鸿蒙系统</p><h4 id="替代方案（可信的第三方APK商店）"><a href="#替代方案（可信的第三方APK商店）" class="headerlink" title="替代方案（可信的第三方APK商店）"></a>替代方案（可信的第三方APK商店）</h4><ul><li><a href="https://www.apkmirror.com/">APKMirror</a></li><li><a href="https://apkpure.com/cn">APKPure</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谷歌三件套 </tag>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好用的 Telegram 中文包推荐</title>
      <link href="/2025/01/02/8/"/>
      <url>/2025/01/02/8/</url>
      
        <content type="html"><![CDATA[<h2 id="中文语言包"><a href="#中文语言包" class="headerlink" title="中文语言包"></a>中文语言包</h2><p>简体中文（官方 Beta版）：<a href="https://t.me/setlanguage/zh-hans-raw">https://t.me/setlanguage/zh-hans-raw</a><br>繁体中文 (官方 Beta版): <a href="https://t.me/setlanguage/zh-hant-raw">https://t.me/setlanguage/zh-hant-raw</a><br>简体中文(聪聪): <a href="https://t.me/setlanguage/zhcncc">https://t.me/setlanguage/zhcncc</a><br>简体中文(@zh_CN 版): <a href="https://t.me/setlanguage/classic-zh-cn">https://t.me/setlanguage/classic-zh-cn</a><br>简体中文(langCN): <a href="https://t.me/setlanguage/zhlangcn">https://t.me/setlanguage/zhlangcn</a><br>简体中文(瓜体): <a href="https://t.me/setlanguage/duang-zh-cn">https://t.me/setlanguage/duang-zh-cn</a><br>简体中文(小哇): <a href="https://t.me/setlanguage/qingwa">https://t.me/setlanguage/qingwa</a><br>喵体中文 （ @MiaoCN ）: <a href="https://t.me/setlanguage/meowcn">https://t.me/setlanguage/meowcn</a><br>中文（香港）: <a href="https://t.me/setlanguage/hongkong">https://t.me/setlanguage/hongkong</a><br>台湾繁体: <a href="https://t.me/setlanguage/zh-hant-beta">https://t.me/setlanguage/zh-hant-beta</a><br>台湾正体: <a href="https://t.me/setlanguage/taiwan">https://t.me/setlanguage/taiwan</a><br>郭桓桓的繁體中文語言包: <a href="https://t.me/setlanguage/zhong-taiwan-traditional">https://t.me/setlanguage/zhong-taiwan-traditional</a><br>文言: <a href="https://t.me/setlanguage/chinese-ancient">https://t.me/setlanguage/chinese-ancient</a>  </p><h3 id="怎么设置-Telegram-为中文呢？"><a href="#怎么设置-Telegram-为中文呢？" class="headerlink" title="怎么设置 Telegram 为中文呢？"></a>怎么设置 Telegram 为中文呢？</h3><p>Telegram 设置为中文十分简单，只需要点击以上中文汉化包链接，跳转到 Telegram 软件内，点击一下确认按钮，就好了。</p><p>也可以通过导入语言包的压缩包进行语言切换，不过此方式不适合大多数 Telegram 用户，更多的是为开发者准备的。</p><p>如果仍然不会操作，这里有图文教程：一键将 Telegram 「电报」改为中文版（安卓、iOS、Windows、macOS 系统适用）</p><p>关于 Telegram 使用问题，软件交流及更多，可以加入 Telegram 中文群组和广大网友一同探讨：</p><h4 id="警惕山寨的-Telegram-中文版！"><a href="#警惕山寨的-Telegram-中文版！" class="headerlink" title="警惕山寨的 Telegram 中文版！"></a>警惕山寨的 Telegram 中文版！</h4><p>如果你有看到 Telegram 中文网页，不用怀疑，这个是钓鱼网站！Telegram 网站并没有中文语言选项，官方网站地址为 <a href="https://telegram.org/">telegram.org</a>。通过上方的官网截图也可以看到官方网站语言选项中并没有中文选项。请牢记此域名，其他网址多为山寨网站。</p><p>Telegram 中文版、TG 中文版，皆为盗版！请注意！！！</p><h4 id="Telegram-推出中文网站了？谨防山寨-Telegram-网站"><a href="#Telegram-推出中文网站了？谨防山寨-Telegram-网站" class="headerlink" title="Telegram 推出中文网站了？谨防山寨 Telegram 网站"></a>Telegram 推出中文网站了？谨防山寨 Telegram 网站</h4><p>所以目前并没有 Telegram 中文官网。谨记！谨记！不要下载到了携带木马病毒的 Telegram 安装包。</p><h4 id="Telegram-国内使用"><a href="#Telegram-国内使用" class="headerlink" title="Telegram 国内使用"></a>Telegram 国内使用</h4><p>由于 Telegram 服务被屏蔽所以国内使用 Telegram 需要翻墙。目前中国大陆地区手机号（+86）可以正常收到验证短信，只是比较缓慢，一般需要等待几分钟时间。如果你当前有设备处于登录状态，则可以使用此设备的 Telegram App 接收验证码而无需等待发送短信。</p><p>即时可以使用中国国内手机号码注册 Telegram 账号，但更推荐的方式是购买 Google Voice 虚拟号码绑定 Telegram ，以获得更好的隐私保护。</p><p>目前翻墙使用 Telegram 主要有两种方式，一是使用翻墙软件，二是使用 Telegram 官方内置的 MTProxy 代理实现直连（此方式适合开发者，一般用户不推荐）。</p><p>如果你还没有好用的翻墙工具提供商，可以查看节点猫博客推荐的翻墙机场梯子。</p><p>节点猫是一个专注推荐翻墙机场梯子的博客，而 SS&#x2F;SSR&#x2F;V2ray&#x2F;Trojan 机场翻墙也是目前最稳定快速的翻墙方式。科技雷达博主目前找翻墙梯子，也主要是从节点猫博客查找，网站会给出一个机场梯子的优缺点评价，比较方便。</p>]]></content>
      
      
      <categories>
          
          <category> Telegram </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中文 </tag>
            
            <tag> Telegram </tag>
            
            <tag> 推荐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win11 安装 Docker Desktop 和 WSL2 并进行安装位置迁移</title>
      <link href="/2025/01/02/10/"/>
      <url>/2025/01/02/10/</url>
      
        <content type="html"><![CDATA[<h1 id="Win11-安装-Docker-Desktop-和-WSL2-并进行安装位置迁移"><a href="#Win11-安装-Docker-Desktop-和-WSL2-并进行安装位置迁移" class="headerlink" title="Win11 安装 Docker Desktop 和 WSL2 并进行安装位置迁移"></a>Win11 安装 Docker Desktop 和 WSL2 并进行安装位置迁移</h1><h2 id="1-下载为之后使用命令行进行安装"><a href="#1-下载为之后使用命令行进行安装" class="headerlink" title="1. 下载为之后使用命令行进行安装"></a>1. 下载为之后使用命令行进行安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Start-Process -Wait -FilePath <span class="string">&quot;Docker Desktop Installer.exe&quot;</span> -ArgumentList <span class="string">&quot;install --installation-dir=D:\Docker&quot;</span></span><br></pre></td></tr></table></figure><p>安装完重启</p><h2 id="2-安装-WSL2"><a href="#2-安装-WSL2" class="headerlink" title="2. 安装 WSL2"></a>2. 安装 WSL2</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --install</span><br></pre></td></tr></table></figure><p>此命令会自动安装 WSL2 并默认安装 Ubuntu 发行版。.</p><h3 id="3-设置-WSL2-为默认版本"><a href="#3-设置-WSL2-为默认版本" class="headerlink" title="3. 设置 WSL2 为默认版本"></a>3. 设置 WSL2 为默认版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --set-default-version 2</span><br></pre></td></tr></table></figure><p>设置完Ubuntu用户名以及密码</p><h3 id="4-列出其安装的Liunx系统"><a href="#4-列出其安装的Liunx系统" class="headerlink" title="4. 列出其安装的Liunx系统"></a>4. 列出其安装的Liunx系统</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl -l -v</span><br></pre></td></tr></table></figure><p>如果运行状态为 Running，需先通过以下命令关闭：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --shutdown</span><br></pre></td></tr></table></figure><p>然后我们通过以下命令将 Ubuntu导出为 tar 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --<span class="built_in">export</span> Ubuntu D:\Ubuntu.tar</span><br></pre></td></tr></table></figure><p>导出成功后，可以在导出的路径下看到导出的 tar 文件</p><p>然后注销并卸载 Ubuntu</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --unregister Ubuntu</span><br></pre></td></tr></table></figure><p>再次查看已安装的 Linux 发行版：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl -l -v</span><br></pre></td></tr></table></figure><p>已经注销并卸载了</p><p>然后将其tar导入到新位置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --import Ubuntu D:\Ubuntu D:\Ubuntu.tar</span><br></pre></td></tr></table></figure><p>注：wsl –import <Distribution Name> <InstallLocation> <FileName><br><Distribution Name> 为目标 Linux 发行版的名称，我安装的为： <code>Ubuntu-22.04</code><br><InstallLocation> 为要安装到的新位置，这里我安装到：<code>E:\ubuntu2204</code><br><FileName> 为要导入的文件名，这里导入刚才导出的 <code>e:\Ubuntu-22.04.tar</code></p><p>导入完成后，再次查看已安装的 Linux 发行版：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl -l -v</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/cn_ljr/article/details/132047516">Win11 安装 Docker Desktop 和 WSL2 并进行安装位置迁移_windows 11 wsl 修改安装位置-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> Wsl2 </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub Actions自动部署Hexo脚本</title>
      <link href="/2025/01/02/9/"/>
      <url>/2025/01/02/9/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>网上虽然有很多通过GitHub Actions自动部署Hexo的教程，但都有各种各样的问题。<br>主要问题还是Workflow脚本没有写正确，比如插件部分。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>1、生成密钥对（这个也不会的话，方法自行Google）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -f ~/.ssh/GitHub-actions-deploy</span><br></pre></td></tr></table></figure><p>然后会获得一个公钥和私钥.</p><h4 id="2、在GitHub-Pages所在的仓库中添加-“公钥”"><a href="#2、在GitHub-Pages所在的仓库中添加-“公钥”" class="headerlink" title="2、在GitHub Pages所在的仓库中添加 “公钥”"></a>2、在GitHub Pages所在的仓库中添加 “公钥”</h4><p>找到仓库的<code>Settings</code>-<code>Deploye keys</code>- <code>Add deploy key</code></p><ul><li><code>Title</code> 填入：<code>ACTION_DEPLOY_KEY</code></li><li><code>Key</code> 填入：<code># 步骤 1 生成的密钥对中的公钥 即ssh-rsa开头的pub文件</code></li><li>必须勾上<code>Allow write access</code></li></ul><h4 id="3、在存放Hexo源代码文件的仓库中添加-“私钥”"><a href="#3、在存放Hexo源代码文件的仓库中添加-“私钥”" class="headerlink" title="3、在存放Hexo源代码文件的仓库中添加 “私钥”"></a>3、在存放Hexo源代码文件的仓库中添加 “私钥”</h4><p>PS:跟步骤2中的仓库可能是同一个，也可能不是同一个。根据自己的选型设置。</p><p>找到仓库的<code>Settings</code>-<code>Secrets</code>- <code>Add a new secret</code></p><ul><li><code>Name</code> 填入：<code>ACTION_DEPLOY_KEY</code></li><li><code>Value</code> 填入：<code># 步骤 1 生成的密钥对中的私钥 没有后缀为pub的是</code></li></ul><h3 id="4、脚本配置"><a href="#4、脚本配置" class="headerlink" title="4、脚本配置"></a>4、脚本配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">name: 自动部署 Hexo</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - main</span><br><span class="line">  pull_request:</span><br><span class="line">    branches:</span><br><span class="line">      - main</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  build:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    strategy:</span><br><span class="line">      matrix:</span><br><span class="line">        node-version: [22.x] # 更新为 Node.js 22</span><br><span class="line">    steps:</span><br><span class="line">      - name: 开始运行</span><br><span class="line">        uses: actions/checkout@v3</span><br><span class="line"></span><br><span class="line">      - name: 设置 Node.js $&#123;&#123; matrix.node-version &#125;&#125;</span><br><span class="line">        uses: actions/setup-node@v3</span><br><span class="line">        with:</span><br><span class="line">          node-version: $&#123;&#123; matrix.node-version &#125;&#125;</span><br><span class="line"></span><br><span class="line">      - name: 缓存 node_modules</span><br><span class="line">        uses: actions/cache@v3</span><br><span class="line">        with:</span><br><span class="line">          path: node_modules</span><br><span class="line">          key: node-modules-$&#123;&#123; runner.os &#125;&#125;-$&#123;&#123; hashFiles(&#x27;**/package-lock.json&#x27;) &#125;&#125;</span><br><span class="line">          restore-keys: |</span><br><span class="line">            node-modules-$&#123;&#123; runner.os &#125;&#125;-</span><br><span class="line"></span><br><span class="line">      - name: 配置 Git 环境</span><br><span class="line">        env:</span><br><span class="line">          ACTION_DEPLOY_KEY: $&#123;&#123; secrets.ACTION_DEPLOY_KEY &#125;&#125;</span><br><span class="line">        run: |</span><br><span class="line">          mkdir -p ~/.ssh/</span><br><span class="line">          echo &quot;$ACTION_DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa</span><br><span class="line">          chmod 600 ~/.ssh/id_rsa</span><br><span class="line">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="line">          git config --global user.name &quot;Your Github name&quot;</span><br><span class="line">          git config --global user.email &quot;Your Github email&quot;</span><br><span class="line"></span><br><span class="line">      - name: 安装 Hexo CI</span><br><span class="line">        run: |</span><br><span class="line">          export TZ=&#x27;Asia/Shanghai&#x27;</span><br><span class="line">          npm i -g hexo-cli</span><br><span class="line">          npm i</span><br><span class="line"></span><br><span class="line">      - name: 安装插件</span><br><span class="line">        run: |</span><br><span class="line">          npm install hexo-auto-issue@1.0.4 hexo-deployer-git@4.0.0 hexo-generator-archive@2.0.0 hexo-generator-category@2.0.0 hexo-generator-index@3.0.0 hexo-generator-search@2.4.3 hexo-generator-tag@2.0.0 hexo-renderer-ejs@2.0.0 hexo-renderer-marked@6.3.0 hexo-renderer-pug@3.0.0 hexo-renderer-stylus@3.0.1 hexo-server@3.0.0 hexo-theme-landscape@1.0.0 hexo-wordcount@6.0.1 --save</span><br><span class="line"></span><br><span class="line">      - name: 部署博客</span><br><span class="line">        run: |</span><br><span class="line">          rm -rf .deploy_git</span><br><span class="line">          hexo g &amp;&amp; hexo douban &amp;&amp; hexo deploy</span><br><span class="line"></span><br><span class="line">      - name: 清理</span><br><span class="line">        run: |</span><br><span class="line">          rm ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">      - name: 检查构建状态</span><br><span class="line">        if: $&#123;&#123; failure() &#125;&#125;</span><br><span class="line">        run: |</span><br><span class="line">          echo &quot;构建失败，请检查日志以获取更多信息。&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  - name: 设置 Node.js $&#123;&#123; matrix.node-version &#125;&#125;</span><br><span class="line">    uses: actions/setup-node@v3</span><br><span class="line">    with:</span><br><span class="line">      node-version: $&#123;&#123; matrix.node-version &#125;&#125;</span><br><span class="line"></span><br><span class="line">  - name: 缓存 node_modules</span><br><span class="line">    uses: actions/cache@v3</span><br><span class="line">    with:</span><br><span class="line">      path: node_modules</span><br><span class="line">      key: node-modules-$&#123;&#123; runner.os &#125;&#125;-$&#123;&#123; hashFiles(&#x27;**/package-lock.json&#x27;) &#125;&#125;</span><br><span class="line">      restore-keys: |</span><br><span class="line">        node-modules-$&#123;&#123; runner.os &#125;&#125;-</span><br><span class="line"></span><br><span class="line">  - name: 配置 Git 环境</span><br><span class="line">    env:</span><br><span class="line">      ACTION_DEPLOY_KEY: $&#123;&#123; secrets.ACTION_DEPLOY_KEY &#125;&#125;</span><br><span class="line">    run: |</span><br><span class="line">      mkdir -p ~/.ssh/</span><br><span class="line">      echo &quot;$ACTION_DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa</span><br><span class="line">      chmod 600 ~/.ssh/id_rsa</span><br><span class="line">      ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class="line">      git config --global user.name &quot;&quot;</span><br><span class="line">      git config --global user.email &quot;&quot;</span><br><span class="line"></span><br><span class="line">  - name: 安装 Hexo CI</span><br><span class="line">    run: |</span><br><span class="line">      export TZ=&#x27;Asia/Shanghai&#x27;</span><br><span class="line">      npm i -g hexo-cli</span><br><span class="line">      npm i</span><br><span class="line"></span><br><span class="line">  - name: 安装插件</span><br><span class="line">    run: |</span><br><span class="line">      npm install hexo-auto-issue@1.0.4 hexo-deployer-git@4.0.0 hexo-generator-archive@2.0.0 hexo-generator-category@2.0.0 hexo-generator-index@3.0.0 hexo-generator-search@2.4.3 hexo-generator-tag@2.0.0 hexo-renderer-ejs@2.0.0 hexo-renderer-marked@6.3.0 hexo-renderer-pug@3.0.0 hexo-renderer-stylus@3.0.1 hexo-server@3.0.0 hexo-theme-landscape@1.0.0 hexo-wordcount@6.0.1 --save</span><br><span class="line"></span><br><span class="line">  - name: 部署博客</span><br><span class="line">    run: |</span><br><span class="line">      rm -rf .deploy_git</span><br><span class="line">      hexo g &amp;&amp; hexo douban &amp;&amp; hexo deploy</span><br><span class="line"></span><br><span class="line">  - name: 清理</span><br><span class="line">    run: |</span><br><span class="line">      rm ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">  - name: 检查构建状态</span><br><span class="line">    if: $&#123;&#123; failure() &#125;&#125;</span><br><span class="line">    run: |</span><br><span class="line">      echo &quot;构建失败，请检查日志以获取更多信息。&quot;</span><br></pre></td></tr></table></figure><h3 id="5、修改一下Actions脚本"><a href="#5、修改一下Actions脚本" class="headerlink" title="5、修改一下Actions脚本"></a>5、修改一下Actions脚本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;&quot;</span><br><span class="line">git config --global user.email &quot;&quot;</span><br><span class="line">git clone https://github.com/*/*.GitHub.io .deploy_git</span><br></pre></td></tr></table></figure><p>修改为自己的数值</p><h3 id="6、其他注意事项"><a href="#6、其他注意事项" class="headerlink" title="6、其他注意事项"></a>6、其他注意事项</h3><ul><li>脚本中插件部分可按自己实际用的插件删改，<code>npm ls --depth 0</code> 可查看自己安装了哪些插件</li><li>如果没有用到 <code>hexo douban</code> 插件，部署命令：<br><code>hexo g &amp;&amp; hexo douban &amp;&amp; hexo deploy</code> 可改为 <code>hexo g -d</code></li></ul><p>另外一个建议是，所使用的 <code>theme</code> 中的 <code>主题目录</code> 用 <code>git subtree</code> 添加为子项目去维护。<br>这样在多环境多终端发布文章时，不会 <code>clone</code> 或 <code>pull</code> 一个空 <code>theme</code>。</p><h4 id="7、git-push"><a href="#7、git-push" class="headerlink" title="7、git push"></a>7、git push</h4><p>文章写好后，不需要在本地构建，只需要 <code>git push</code> 到GitHub仓库即可自动部署。<br>其中部署方式在Hexo根目录的 <code>_config.yml</code> 中配置。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 教程 </tag>
            
            <tag> GitHub Actions </tag>
            
            <tag> 脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从根本上跳过 Pixel 开机引导验证</title>
      <link href="/2024/12/25/6/"/>
      <url>/2024/12/25/6/</url>
      
        <content type="html"><![CDATA[<h2 id="1、twrp中的终端输入："><a href="#1、twrp中的终端输入：" class="headerlink" title="1、twrp中的终端输入："></a>1、twrp中的终端输入：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd if=/dev/zero of=/dev/block/bootdevice/by-name/frp</span><br></pre></td></tr></table></figure><h2 id="2、或CMD中输入：-进入fastboot"><a href="#2、或CMD中输入：-进入fastboot" class="headerlink" title="2、或CMD中输入：(进入fastboot)"></a>2、或CMD中输入：(进入fastboot)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastboot erase frp</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Pixel </tag>
            
            <tag> 验证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原生安卓解决WiFi网络受限以及修改NTP服务器</title>
      <link href="/2024/12/25/7/"/>
      <url>/2024/12/25/7/</url>
      
        <content type="html"><![CDATA[<h2 id="解决网络受限"><a href="#解决网络受限" class="headerlink" title="解决网络受限"></a>解决网络受限</h2><ol><li>通过ADB命令的方式</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings delete global captive_portal_https_url</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings delete global captive_portal_http_url</span><br></pre></td></tr></table></figure><p>再修改新的地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global captive_portal_https_url https://connect.rom.miui.com/generate\_204</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global captive_portal_http_url http://connect.rom.miui.com/generate\_204</span><br></pre></td></tr></table></figure><p>上面的不行再试试下面的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global captive_portal_http_url http://connect.rom.miui.com/generate_204</span><br><span class="line">adb shell settings put global captive_portal_https_url https://connect.rom.miui.com/generate_204</span><br></pre></td></tr></table></figure><p>运行后断开手机连接，关闭 WiFi 重新打开就解决问题了。</p><ol start="2"><li>修改NTP服务器<br>执行以下命令后重启手机：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell setprop persist.sys.timezone Asia/Shanghai</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global ntp_server ntp1.aliyun.com</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> 原生安卓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何将VS Code 和 Cmder 整合。（设置cmder 为 vs code默认terminal）</title>
      <link href="/2024/12/21/4/"/>
      <url>/2024/12/21/4/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Cmder 是 Windows 下一款非常好用的命令行工具，它集成了很多有用的功能，比如：</p><ul><li>自动补全</li><li>历史命令记录</li><li>自定义命令</li><li>任务调度</li><li>自定义快捷键</li></ul><p>VS Code 是微软推出的开源编辑器，它有着强大的插件系统，可以扩展很多功能。</p><p>本文将介绍如何将 VS Code 和 Cmder 整合，使得 VS Code 打开文件时默认使用 Cmder 作为默认终端。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>在vscode中,按下ctrl+shift+p键，输入setting，打开user settings</p></li><li><p>然后依次点击：Features -&gt; Terminal -&gt; Edit in the settings.json</p></li><li><p>进入了setting的json文件，将</p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;terminal.integrated.shell.windows&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\WINDOWS\\System32\\cmd.exe&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>注释掉，换成：（如果没有上面这行，直接添加下面的三行即可）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;terminal.integrated.shell.windows&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cmd.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;terminal.integrated.env.windows&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;CMDER_ROOT&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[cmder_root]&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;terminal.integrated.shellArgs.windows&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;/k&quot;</span><span class="punctuation">,</span> <span class="string">&quot;[cmder_root]\\vendor\\init.bat&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>注意，terminal.integrated.shell.windows”确实是 “cmd.exe”，而不是cmder.exe。此外，要将[cmder_root]换成你的cmder安装路径。</p><p>重启vs code，打开terminal，<img src="/imges/4.png" alt="alt text"></p><p>在选择默认配置文件点击Cmder即可:如图所示。<img src="/imges/5.png" alt="alt text"></p><ol start="4"><li>这样，打开文件时，VS Code 会默认使用 Cmder 作为默认终端。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> Cmder </tag>
            
            <tag> VS Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH代理配置</title>
      <link href="/2024/12/21/5/"/>
      <url>/2024/12/21/5/</url>
      
        <content type="html"><![CDATA[<h2 id="SSH协议"><a href="#SSH协议" class="headerlink" title="SSH协议"></a>SSH协议</h2><p>本示例假定读者已经在本地10808端口部署了socks5的代理以及http代理。</p><h3 id="1-使用Scoop安装nmap"><a href="#1-使用Scoop安装nmap" class="headerlink" title="1.使用Scoop安装nmap"></a>1.使用Scoop安装nmap</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop install main/nmap</span><br></pre></td></tr></table></figure><h3 id="2-ncat-（Windows）"><a href="#2-ncat-（Windows）" class="headerlink" title="2.ncat （Windows）"></a>2.ncat （Windows）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Host http://ssh.github.com</span><br><span class="line">    User git</span><br><span class="line">    HostName http://ssh.github.com</span><br><span class="line">    Port 443</span><br><span class="line">    ProxyCommand ncat --verbose --proxy-type socks5 --proxy 127.0.0.1:10808 %h %p</span><br><span class="line"></span><br><span class="line">Host github.com</span><br><span class="line">    User git</span><br><span class="line">    HostName github.com</span><br><span class="line">    ProxyCommand ncat --verbose --proxy-type socks5 --proxy 127.0.0.1:10808 %h %p</span><br></pre></td></tr></table></figure><p>将其放在.ssh&#x2F;config中，然后就可以使用ssh命令访问github了。</p><h2 id="或者使用HTTPS连接GitHub"><a href="#或者使用HTTPS连接GitHub" class="headerlink" title="或者使用HTTPS连接GitHub"></a>或者使用HTTPS连接GitHub</h2><h3 id="https协议"><a href="#https协议" class="headerlink" title="https协议"></a>https协议</h3><p>https代理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy http://127.0.0.1:1080</span><br></pre></td></tr></table></figure><p>关闭https代理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br></pre></td></tr></table></figure><p>但是目前测试其SSH以及HTTPS,SSH比HTTPS还是慢的多。</p><p>不过目前官方GitHub已经有其自己的源代码管理工具GitHub CLI了</p><p><a href="https://cli.github.com/">https://cli.github.com/</a></p><p>你也可以使用 <code>scoop install main/gh</code>进行安装</p>]]></content>
      
      
      
        <tags>
            
            <tag> 教程 </tag>
            
            <tag> SSH </tag>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用Hexo搭建个人博客</title>
      <link href="/2024/12/20/3/"/>
      <url>/2024/12/20/3/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Hexo是一个快速、简洁且高效的博客框架。Hexo使用Markdown（或其他语言）来写作，可以方便地与GitHub Pages集成。Hexo支持丰富的插件，可以让你快速搭建个性化的博客。</p><p>本教程将介绍如何使用Hexo搭建个人博客，并详细介绍Hexo的基本使用方法。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>首先，你需要安装Node.js。你可以到官方网站下载安装包安装Node.js。</p><p>或者使用Scoop安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scoop install versions/nodejs22</span><br></pre></td></tr></table></figure><p>安装好Node.js后，cd到blog文件夹，然后你可以使用npm安装Hexo：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h2 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h2><p>创建博客的命令是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br></pre></td></tr></table></figure><p>其中，<code>&lt;folder&gt;</code>是你要创建的博客的文件夹名称。</p><p>例如，如果你要创建名为<code>blog</code>的博客，则命令为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure><h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><p>Hexo提供了丰富的主题，你可以在<a href="https://hexo.io/themes/">这里</a>找到你喜欢的主题。</p><p>安装主题的命令是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install hexo-theme-xxx</span><br></pre></td></tr></table></figure><p>例如，如果你要安装名为<code>landscape</code>的主题，则命令为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd blog</span><br><span class="line">npm install hexo-theme-landscape</span><br></pre></td></tr></table></figure><h2 id="启动博客"><a href="#启动博客" class="headerlink" title="启动博客"></a>启动博客</h2><p>启动博客的命令是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>Hexo会启动一个本地服务器，你可以在浏览器中访问<code>http://localhost:4000</code>查看博客。</p><h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><p>在博客文件夹的<code>source/_posts</code>文件夹中，你可以创建新的Markdown文件，来写你的文章。</p><h2 id="相关的命令"><a href="#相关的命令" class="headerlink" title="相关的命令"></a>相关的命令</h2><ul><li><code>hexo new &quot;postName&quot;</code>：创建一个新的文章。</li><li><code>hexo generate</code>：将文章转换为静态页面。</li><li><code>hexo deploy</code>：将静态页面部署到GitHub Pages。</li><li><code>hexo help</code>：查看Hexo的所有命令。</li></ul><h2 id="部署到GitHub-Pages"><a href="#部署到GitHub-Pages" class="headerlink" title="部署到GitHub Pages"></a>部署到GitHub Pages</h2><p>如果你想将博客部署到GitHub Pages，你需要先在GitHub上创建一个&lt;你的用户名&gt;.github.io的仓库。</p><p>新建Blog仓库放你的博客源代码可私有或者公有。</p><p>进入博客文件夹，配置其_config.yml，找到 url 配置项，修改为你的仓库地址。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://&lt;你的用户名&gt;.github.io</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">git@github.com:&lt;你的用户名&gt;/&lt;你的用户名&gt;.github.io.git</span></span><br></pre></td></tr></table></figure><p>这里使用SSH方式，需要先配置好SSH。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;&lt;你的邮箱&gt;&quot;</span><br></pre></td></tr></table></figure><p>然后将生成的公钥添加到GitHub的SSH和GPG keys中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>然后验证你是否链接到了GitHub。要使用Git bash或WSL2，运行以下命令：</p><figure class="highlight plaintext"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>成功的话Hi &lt;你的用户名&gt;! You’ve successfully authenticated, but GitHub does not provide shell access.</p><hr><p>如果报这个错误2024-12-20 16:27:46.471 [info] &gt; git clone ssh:&#x2F;&#x2F;<a href="mailto:&#103;&#105;&#116;&#64;&#x73;&#x73;&#x68;&#x2e;&#x67;&#105;&#x74;&#104;&#x75;&#98;&#46;&#x63;&#x6f;&#x6d;">&#103;&#105;&#116;&#64;&#x73;&#x73;&#x68;&#x2e;&#x67;&#105;&#x74;&#104;&#x75;&#98;&#46;&#x63;&#x6f;&#x6d;</a>:443&#x2F;&lt;你的用户名&gt;&#x2F;&lt;你的用户名&gt;.github.io.git d:\vscode_works&lt;你的用户名&gt;.github.io –progress [10472ms]<br>2024-12-20 16:27:46.471 [info] Cloning into ‘d:\vscode_works&lt;你的用户名&gt;.github.io’…<br>Host key verification failed.<br>fatal: Could not read from remote repository.</p><p>Please make sure you have the correct access rights<br>and the repository exists.</p><h3 id="你需要尝试手动添加GitHub-公钥"><a href="#你需要尝试手动添加GitHub-公钥" class="headerlink" title="你需要尝试手动添加GitHub 公钥"></a>你需要尝试手动添加GitHub 公钥</h3><ol><li>打开 Git Bash 或命令行工具，运行以下命令，将 GitHub 的 SSH 公钥添加到 known_hosts 文件中：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keyscan github.com &gt;&gt; C:\Users\ASUS\.ssh\known_hosts</span><br></pre></td></tr></table></figure><ol start="2"><li>确认 known_hosts 文件已存在</li></ol><ul><li>确保 <code>C:\Users\ASUS\.ssh\known_hosts</code> 文件存在，并且可以写入。</li><li>如果该文件不存在，请手动创建它。</li></ul><ol start="3"><li>验证 SSH 密钥是否添加成功</li></ol><hr><p>确保你的 SSH 密钥已经正确配置，并且 GitHub 上已经添加了你的公钥。</p><ol><li>检查本地 SSH 密钥是否正确配置：<br>使用以下命令查看当前是否已加载 SSH 密钥：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add -L</span><br></pre></td></tr></table></figure><p>如果没有输出或没有显示你应该用来连接 GitHub 的密钥，你可以通过以下命令添加：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><ol start="2"><li><p>确保 SSH 公钥已添加到 GitHub<br>登录 GitHub，进入 Settings -&gt; SSH and GPG keys，确认你本地的公钥已经添加到 GitHub。</p></li><li><p>尝试使用正确的 SSH URL<br>确保你正在使用正确的 SSH URL 克隆仓库。尝试以下命令：</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:&lt;你的用户名&gt;/&lt;你的用户名&gt;.github.io.git</span><br></pre></td></tr></table></figure><h3 id="部署到GitHub"><a href="#部署到GitHub" class="headerlink" title="部署到GitHub"></a>部署到GitHub</h3><ol><li>确保安装了</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ol start="2"><li>编辑 _config.yml</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:&lt;你的用户名&gt;/&lt;你的用户名&gt;.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>或者不使用SSH</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/&lt;你的用户名&gt;/&lt;你的用户名&gt;.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><ol start="3"><li>部署博客</li></ol><p>在blog文件夹下，运行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo generate </span><br><span class="line">or</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><hr><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br><span class="line">or </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>部署完成后，你应该可以访问你的博客了。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建教程 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>邮箱蜂鸟软件配置</title>
      <link href="/2024/12/20/2/"/>
      <url>/2024/12/20/2/</url>
      
        <content type="html"><![CDATA[<h3 id="邮箱蜂鸟软件配置"><a href="#邮箱蜂鸟软件配置" class="headerlink" title="邮箱蜂鸟软件配置"></a>邮箱蜂鸟软件配置</h3><h4 id="1-想要使用其蜂鸟登录其Gmail邮箱，需要进行以下配置"><a href="#1-想要使用其蜂鸟登录其Gmail邮箱，需要进行以下配置" class="headerlink" title="1. 想要使用其蜂鸟登录其Gmail邮箱，需要进行以下配置"></a>1. 想要使用其蜂鸟登录其Gmail邮箱，需要进行以下配置</h4><p>当Gmail检测到内置的Thunderbird浏览器的用户代理时，似乎无法进行身份验证。解决方案是将</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">general.useragent.compatMode.firefox</span><br></pre></td></tr></table></figure><p>属性设置为true。这可以通过配置编辑器（编辑-首选项-高级-常规-配置编辑器）来完成。</p><h4 id="2-避免或纠正由于拒绝-Cookie-而导致的-OAuth-错误"><a href="#2-避免或纠正由于拒绝-Cookie-而导致的-OAuth-错误" class="headerlink" title="2. 避免或纠正由于拒绝 Cookie 而导致的 OAuth 错误"></a>2. 避免或纠正由于拒绝 Cookie 而导致的 OAuth 错误</h4><p>首先，检查在常规设置中 Thunderbird 的 Cookie 设置：</p><p>≡ &gt; 设置 &gt; 隐私与安全 &gt; 网络内容。<br>查看 接受网站 Cookie 勾选框。<br>如果 接受网站 Cookie 还 没有 勾选，那么请执行以下操作之一，然后再次进行 OAuth 登录流程：</p><p>创建接受 谷歌 Cookie 的例外：<br>点击 例外… 按钮打开 例外 - Cookie 对话框。<br>在 网站地址 输入框中输入 <code>https://accounts.google.com</code><br>选择 允许，然后 保存更改。</p><p>在完成 OAuth 流程之后，你可以再次拒绝 Cookie，收发邮件不会受到 Cookie 的影响。 但是拒绝所有 Cookie 会导致在 Gmial 的 OAuth 令牌将来过期后还需要再次进行 OAuth 流程，那时仍需接受 Cookie。</p><p>如需详细了解 Cookie，请参看 <a href="https://support.mozilla.org/zh-CN/kb/%E9%9A%90%E7%A7%81%E9%9D%A2%E6%9D%BF%E2%80%94%E2%80%94Thunderbird%E8%BF%9C%E7%A8%8B%E5%86%85%E5%AE%B9%E5%92%8Ccookie%E7%9A%84%E8%AE%BE%E7%BD%AE">隐私面板——Thunderbird远程内容和cookie的设置</a></p><h4 id="3-避免或修复由于禁用-javascript-而导致的-OAuth-失败"><a href="#3-避免或修复由于禁用-javascript-而导致的-OAuth-失败" class="headerlink" title="3.避免或修复由于禁用 javascript 而导致的 OAuth 失败"></a>3.避免或修复由于禁用 javascript 而导致的 OAuth 失败</h4><p>打开 ≡ &gt; 设置 &gt; 常规<br>在 常规 设置面板右下角点击 配置编辑器。<br>将 <code>javascript.enabled</code> 粘贴到 搜索首选项名字 搜索框内。<br>您现在应该看到带有 <code>javascript.enabled</code> 的一个搜索结果。<br>如果您看到 <code>javascript.enabled</code> 且包含 true，则无需更改。<br>如果看到 false，则必须通过单击位于右侧的切换按钮将其更改为 true。</p><h4 id="4-检查认证令牌是否已被保存"><a href="#4-检查认证令牌是否已被保存" class="headerlink" title="4. 检查认证令牌是否已被保存"></a>4. 检查认证令牌是否已被保存</h4><p>打开 ≡ &gt; 设置 &gt; 隐私与安全 &gt; 密码&gt; 已存密码。<br>如果认证方法设置为 OAuth2 并且 OAuth 登录成功，那么你会看到每个用户登录的条目 (gmail account) 如下：</p><p><code>oauth://accounts.google.com (&lt;https://mail.google.com/&gt; …)</code></p><p>注意：这些认证条目是 OAuth2 认证令牌，不是密码。<br>如果认证方法设置为 OAuth2 并且 OAuth 登录 不 成功，那么请检查以下形式的提供商的密码条目并将其删除：</p><p><code>imap://imap.gmail.com (imap://imap.gmail.com)</code></p><p><code>smtp://smtp.gmail.com (smtp://smtp.gmail.com)</code></p><h3 id="通过上面的配置，您应该能够成功地使用蜂鸟登录您的-Gmail-邮箱"><a href="#通过上面的配置，您应该能够成功地使用蜂鸟登录您的-Gmail-邮箱" class="headerlink" title="通过上面的配置，您应该能够成功地使用蜂鸟登录您的 Gmail 邮箱"></a>通过上面的配置，您应该能够成功地使用蜂鸟登录您的 Gmail 邮箱</h3><p>详细请参考<a href="https://support.mozilla.org/zh-CN/kb/google-oauth20">Google 邮件帐户自动转换为 OAuth2.0 身份验证</a></p>]]></content>
      
      
      <categories>
          
          <category> 邮箱配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 邮箱配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站推荐</title>
      <link href="/2024/11/10/1/"/>
      <url>/2024/11/10/1/</url>
      
        <content type="html"><![CDATA[<h3 id="原版微软系统"><a href="#原版微软系统" class="headerlink" title="原版微软系统"></a>原版微软系统</h3><ol><li><p>Microsoft Software Download Listing <a href="https://msdl.gravesoft.dev/">https://msdl.gravesoft.dev/</a><br><img src="/imges/1.png" alt="alt text"></p></li><li><p>UUP dump <a href="https://www.uupdump.cn/">https://www.uupdump.cn/</a> 推荐使用使用了多线程<br><img src="/imges/2.png" alt="alt text"></p></li></ol><h3 id="第三方修改的微软系统-要付费"><a href="#第三方修改的微软系统-要付费" class="headerlink" title="第三方修改的微软系统(要付费)"></a>第三方修改的微软系统(要付费)</h3><ul><li>不忘初心系统 <a href="https://www.pc528.net/">https://www.pc528.net/</a><br><img src="/imges/3.png" alt="alt text"></li></ul><h3 id="系统激活网站"><a href="#系统激活网站" class="headerlink" title="系统激活网站"></a>系统激活网站</h3><ul><li>Microsoft Activation Scripts (MAS) <a href="https://massgrave.dev/">https://massgrave.dev/</a></li></ul><ol><li><p>打开 PowerShell（不是 CMD）。要这样做，右键单击 Windows 开始菜单，然后选择 PowerShell 或终端。</p></li><li><p>复制以下代码并按回车键</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">irm https://get.activated.win | iex</span><br></pre></td></tr></table></figure><ol start="3"><li>看到激活选项。选择[1] HWID 进行 Windows 激活。选择[2] Ohook 进行 Office 激活。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
